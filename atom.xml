<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-11T10:23:50.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang 操作 es相关</title>
    <link href="http://yoursite.com/2019/07/09/golang%20es/"/>
    <id>http://yoursite.com/2019/07/09/golang es/</id>
    <published>2019-07-09T08:55:45.000Z</published>
    <updated>2019-07-11T10:23:50.703Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用过程踩坑"><a href="#使用过程踩坑" class="headerlink" title="使用过程踩坑:"></a>使用过程踩坑:</h4><ul><li>docker安装elastic</li><li>docker启动一个es容器</li><li>使用es 服务</li><li>使用es 创建mapping</li><li>使用es 创建client</li><li>使用es 创建索引</li><li>使用es 删除索引</li><li>使用es 删除数据by id</li><li>使用es 导入数据import</li><li>使用es 设置不分词 全文匹配</li><li>使用es 设置多字段混合搜索</li><li>使用es 设置嵌套搜索</li><li>使用es 设置嵌套搜索和普通多字段混合搜索</li></ul><h4 id="docker安装elastic"><a href="#docker安装elastic" class="headerlink" title="docker安装elastic"></a>docker安装elastic</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull elasticsearch:6.5.0</span><br></pre></td></tr></table></figure><h4 id="docker启动一个es容器"><a href="#docker启动一个es容器" class="headerlink" title="docker启动一个es容器"></a>docker启动一个es容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name es -d -e ES_JAVA_OPTS=<span class="string">"-Xms512m -Xmx512m"</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.5.0</span><br></pre></td></tr></table></figure><p>后面只要使用 docker start es(容器名) 即可 开启该容器了</p><p>然后访问Get localhost:9200 发现未启动成功, 查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f es</span><br><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">[2019-07-11T03:40:22,889][INFO ][o.e.n.Node               ] [yN7SHo9] stopping ...</span><br><span class="line">[2019-07-11T03:40:22,954][INFO ][o.e.n.Node               ] [yN7SHo9] stopped</span><br><span class="line">[2019-07-11T03:40:22,954][INFO ][o.e.n.Node               ] [yN7SHo9] closing ...</span><br><span class="line">[2019-07-11T03:40:22,977][INFO ][o.e.n.Node               ] [yN7SHo9] closed</span><br><span class="line">[2019-07-11T03:40:22,984][INFO ][o.e.x.m.j.p.NativeController] [yN7SHo9] Native controller process has stopped - no new native processes can be started</span><br></pre></td></tr></table></figure></p><p>这里提示：vm.max_map_count [65530] is too low, increase to at least [262144]，说max_map_count的值太小了，需要设大到262144</p><p>查看max_map_count的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/vm/max_map_count</span><br><span class="line">65530</span><br></pre></td></tr></table></figure></p><p>重新设置max_map_count的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w vm.max_map_count=262144</span><br><span class="line">vm.max_map_count = 262144</span><br></pre></td></tr></table></figure></p><p>再次启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start es</span><br></pre></td></tr></table></figure></p><p>在这里的时候一定要慢一会再刷新 locahost:9200 可能是我的电脑配置太低<br>可以查看日志 看到started就代表启动成功了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2019-07-11T09:57:37,454][INFO ][o.e.n.Node               ] [yN7SHo9] started</span><br></pre></td></tr></table></figure></p><p>再次访问 GET localhost:9200<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&#123;</span></span><br><span class="line"><span class="string">name: "yN7SHo9",</span></span><br><span class="line"><span class="string">cluster_name: "docker-cluster",</span></span><br><span class="line"><span class="string">cluster_uuid: "J0Bb6xooR_OlTZMEtgoPHg",</span></span><br><span class="line"><span class="string">version: &#123;</span></span><br><span class="line"><span class="string">number: "6.5.4",</span></span><br><span class="line"><span class="string">build_flavor: "default",</span></span><br><span class="line"><span class="string">build_type: "tar",</span></span><br><span class="line"><span class="string">build_hash: "d2ef93d",</span></span><br><span class="line"><span class="string">build_date: "2018-12-17T21:17:40.758843Z",</span></span><br><span class="line"><span class="string">build_snapshot: false,</span></span><br><span class="line"><span class="string">lucene_version: "7.5.0",</span></span><br><span class="line"><span class="string">minimum_wire_compatibility_version: "5.6.0",</span></span><br><span class="line"><span class="string">minimum_index_compatibility_version: "5.0.0"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">tagline: "You Know, for Search"</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure></p><p>以上表示安装成功</p><h4 id="使用es-服务"><a href="#使用es-服务" class="headerlink" title="使用es 服务"></a>使用es 服务</h4><p>只需要在配置中 使用 localhost:9200即可使用该服务了</p><h4 id="使用es创建mapping"><a href="#使用es创建mapping" class="headerlink" title="使用es创建mapping"></a>使用es创建mapping</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapping = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">"settings":&#123;</span></span><br><span class="line"><span class="string">"number_of_shards": 1,  //分片数 分布式的概念 暂时还不怎么理解</span></span><br><span class="line"><span class="string">"number_of_replicas": 0</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"mappings":&#123;</span></span><br><span class="line"><span class="string">"blog":&#123;</span></span><br><span class="line"><span class="string">"properties": &#123;</span></span><br><span class="line"><span class="string">"id": &#123;</span></span><br><span class="line"><span class="string">"type": "keyword"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"title": &#123;</span></span><br><span class="line"><span class="string">"type": "text"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"summary": &#123;</span></span><br><span class="line"><span class="string">"type": "text"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"tags": &#123;</span></span><br><span class="line"><span class="string">"type": "nested",   //嵌套</span></span><br><span class="line"><span class="string">"properties": &#123;</span></span><br><span class="line"><span class="string">"name": &#123;</span></span><br><span class="line"><span class="string">"type": "keyword"  //keyword 表示不对name分词 必须要完全匹配才行</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ESIndexName = <span class="string">"star"</span>   <span class="comment">//索引index 代表数据库 database的概念</span></span><br><span class="line"><span class="keyword">const</span> ESTypeName = <span class="string">"blog"</span>         <span class="comment">//类型type  代表数据库 table的概念</span></span><br></pre></td></tr></table></figure><h4 id="golang-使用并创建一个client"><a href="#golang-使用并创建一个client" class="headerlink" title="golang 使用并创建一个client"></a>golang 使用并创建一个client</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/olivere/elastic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EsClient *elastic.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitElastic</span><span class="params">()</span></span> &#123;</span><br><span class="line">host := Config.Elastic.Addr</span><br><span class="line">fmt.Println(host)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">EsClient, err = elastic.NewClient(</span><br><span class="line">elastic.SetURL(host),</span><br><span class="line">elastic.SetHealthcheck(<span class="literal">false</span>),</span><br><span class="line">elastic.SetSniff(<span class="literal">false</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"create elastic Client error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"create elastic Client success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用过程踩坑&quot;&gt;&lt;a href=&quot;#使用过程踩坑&quot; class=&quot;headerlink&quot; title=&quot;使用过程踩坑:&quot;&gt;&lt;/a&gt;使用过程踩坑:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;docker安装elastic&lt;/li&gt;
&lt;li&gt;docker启动一个es容器&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="golang es" scheme="http://yoursite.com/tags/golang-es/"/>
    
  </entry>
  
  <entry>
    <title>redis布隆选择器在去重方面的使用</title>
    <link href="http://yoursite.com/2019/06/11/redis%E5%B8%83%E9%9A%86%E9%80%89%E6%8B%A9%E5%99%A8%E5%9C%A8%E5%8E%BB%E9%87%8D%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/11/redis布隆选择器在去重方面的使用/</id>
    <published>2019-06-11T08:25:00.000Z</published>
    <updated>2019-06-11T09:16:38.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis布隆选择器背景介绍"><a href="#redis布隆选择器背景介绍" class="headerlink" title="redis布隆选择器背景介绍:"></a>redis布隆选择器背景介绍:</h4><ul><li><p>1.使用场景：推荐系统给用户推荐新闻，避免重复推送。</p><blockquote><p>需要考虑问题：从用户观看历史中筛选出没有看过的新闻进行推送，就需要数据库中频繁的使用exists进行查询，但是当用户量很大时，数据库很难顶住压力。</p></blockquote><blockquote><p>解决方法：</p><ul><li>1.1.使用缓存？但是日子长了，会浪费很大空间，不是长久之计，不是很好的解决办法。</li></ul></blockquote><ul><li>1.2.这时布隆过滤器就可以很好的解决这个需求了，可以节约90%以上的空间，缺点就是稍微有那么一点不准确，存在一定的误判率，但是对于这个新闻推送的可以忽略。</li></ul></li></ul><ul><li><p>2.什么布隆过滤器</p><ul><li><p>2.1其实布隆过滤器可以看成是一个不是很准确的set结构，只是在使用它的contains方法判断某个对象是否存在时会出现误判。但是它也不是特别的不精准，只要参数设置合理，那么它的精确度可以控制的足够精准，只会有小小的误判。</p></li><li><p>2.2当布隆过滤器说某个值存在时，那可能就不存在，如果说某个值不存在时，那肯定就是不存在了</p><blockquote><p>打个比方，当一个人说认识你时可能不认识你，当一个人说不认识你时那肯定就不认识了。当它说见过你时，可能根本没有见过面，只不过可能你的脸和它所认识人中某个人的脸相似度比较高，所以产生误判。</p></blockquote></li><li><p>2.3对于上面的场景，当用户看过的新闻，肯定会被过滤掉，对于没有看多的新闻，可能会过滤极少的一部分（误判），但是绝大部分都可以准确识别。这样可以完全保证推送给用户的新闻都是无重复的。</p></li></ul></li><li><p>3.需要安装新版的redis版本</p><blockquote><p>这里我们使用docker来安装redislabs/rebloom : docker pull redislabs/rebloom:latest</p></blockquote></li><li><p>4.bloomfilter 命令使用</p><ul><li><p>4.1 bf.add</p><blockquote><p>语法:[bf.add key options]<br>127.0.0.1&gt; bf.add users user3</p></blockquote><pre><code>(integer) 1</code></pre></li><li><p>4.2 bf.exists</p><blockquote><p>语法:[bf.exixts key options]<br>127.0.0.1&gt; bf.exists users user3</p></blockquote><pre><code>(integer) 1</code></pre></li><li><p>4.3 bf.madd</p><blockquote><p>语法:[bf.madd key …options]<br>127.0.0.1&gt; bf.madd users user4 user5 user6 user7</p></blockquote><pre><code>(integer) 1(integer) 1(integer) 1(integer) 1</code></pre></li><li><p>4.4 bf.mexists</p><blockquote><p>语法:[bf.mexists key …options]<br>127.0.0.1&gt; bf.mexists users user4 user5 user6 user7 user8</p></blockquote><pre><code>(integer) 1(integer) 1(integer) 1(integer) 1(integer) 0</code></pre></li><li><p>4.5 bf.reserve 创建Filter</p><blockquote><p>语法:[bf.reserve key error_rate initial_size]<br>127.0.0.1&gt; bf.reserve books 0.001 10000</p></blockquote><pre><code>ok</code></pre></li></ul></li><li><p>5.在golang中的代码的具体实现和运用</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gomodule/redigo/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">AddUserLog</span><span class="params">(userId, blogId <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line">_, err := cache.Do(<span class="string">"BF.ADD"</span>, <span class="string">"user-read-log-"</span>+blogId, userId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"bloom filer add err"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">CheckIsRead</span><span class="params">(userId <span class="keyword">string</span>, blogIds []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line"></span><br><span class="line">ints := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, blogId := <span class="keyword">range</span> blogIds &#123;</span><br><span class="line">args := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"user-read-log-"</span> + blogId&#125;</span><br><span class="line">args = <span class="built_in">append</span>(args, userId)</span><br><span class="line">intExists, err := redis.Int(cache.Do(<span class="string">"bf.exists"</span>, args...))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"debug charles intExists error arg"</span>, args)</span><br><span class="line">intExists = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">ints = <span class="built_in">append</span>(ints, intExists)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ints, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">DeleteBlogLogCache</span><span class="params">(blogId <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line">_, err := cache.Do(<span class="string">"EXPIRE"</span>, <span class="string">"user-read-log-"</span>+blogId, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis set expire bloom filter and err"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol start="6"><li>还有一点特别要注意的事项就是, bf只有add和exists两种类似的操作 没有删除操作 如果要是想删除改数据 则使用expire 使该key过期 例如上面演示代码里面提到的DeleteBlogCache函数的用法</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;redis布隆选择器背景介绍&quot;&gt;&lt;a href=&quot;#redis布隆选择器背景介绍&quot; class=&quot;headerlink&quot; title=&quot;redis布隆选择器背景介绍:&quot;&gt;&lt;/a&gt;redis布隆选择器背景介绍:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.使用场景：推荐系统
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>gorm err不为空和记录未找到的错误区别</title>
    <link href="http://yoursite.com/2019/06/11/gorm%20err%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%92%8C%E8%AE%B0%E5%BD%95%E6%9C%AA%E6%89%BE%E5%88%B0/"/>
    <id>http://yoursite.com/2019/06/11/gorm err不为空和记录未找到/</id>
    <published>2019-06-11T08:00:00.000Z</published>
    <updated>2019-06-11T08:15:34.347Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil"><a href="#gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil" class="headerlink" title="gorm 中err != nil 并不是真的服务器有错误 因为它会把记录未找到也当成是err 并且此时err != nil:"></a>gorm 中err != nil 并不是真的服务器有错误 因为它会把记录未找到也当成是err 并且此时err != nil:</h4><h3 id="对于查找的记录是单个结构体的话-所以我们在处理gorm给我返回的错误的时候-要特别处理一下-例如下面这种处理方式"><a href="#对于查找的记录是单个结构体的话-所以我们在处理gorm给我返回的错误的时候-要特别处理一下-例如下面这种处理方式" class="headerlink" title="对于查找的记录是单个结构体的话 所以我们在处理gorm给我返回的错误的时候 要特别处理一下 例如下面这种处理方式:"></a>对于查找的记录是单个结构体的话 所以我们在处理gorm给我返回的错误的时候 要特别处理一下 例如下面这种处理方式:</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err == gorm.ErrRecordNotFound &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对于查找的记录是结构体数组的时候-判断记录是否为空的时候-则要采取另外一种判断-因为没有记录-并不会报错"><a href="#对于查找的记录是结构体数组的时候-判断记录是否为空的时候-则要采取另外一种判断-因为没有记录-并不会报错" class="headerlink" title="对于查找的记录是结构体数组的时候 判断记录是否为空的时候 则要采取另外一种判断 因为没有记录 并不会报错:"></a>对于查找的记录是结构体数组的时候 判断记录是否为空的时候 则要采取另外一种判断 因为没有记录 并不会报错:</h3><blockquote><p>此时我们就只需要判断给我们返回的结构体数组的长度是否是0 来判断是否有查找到记录的 特别要注意这两种情况的判断</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil&quot;&gt;&lt;a href=&quot;#gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="goalng gorm" scheme="http://yoursite.com/tags/goalng-gorm/"/>
    
  </entry>
  
  <entry>
    <title>本地新建仓库并关联远程仓库并且首次提交master分支</title>
    <link href="http://yoursite.com/2019/06/11/%E6%9C%AC%E5%9C%B0%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E9%A6%96%E6%AC%A1%E6%8F%90%E4%BA%A4master/"/>
    <id>http://yoursite.com/2019/06/11/本地新建仓库关联远程仓库并首次提交master/</id>
    <published>2019-06-11T07:45:45.000Z</published>
    <updated>2019-06-11T07:52:54.654Z</updated>
    
    <content type="html"><![CDATA[<h4 id="会出现的问题-首次空的提交远程master分支报错"><a href="#会出现的问题-首次空的提交远程master分支报错" class="headerlink" title="会出现的问题 首次空的提交远程master分支报错:"></a>会出现的问题 首次空的提交远程master分支报错:</h4><blockquote><p>处理方法: git commit -m “empty commit” –allow-empty</p></blockquote><h4 id="一般流程的情况是"><a href="#一般流程的情况是" class="headerlink" title="一般流程的情况是:"></a>一般流程的情况是:</h4><blockquote><p>先配置信息</p><pre><code>* git config --global user.name &quot;xxxxx&quot;* git config --global user.email &quot;xxxx@xx.com&quot;</code></pre></blockquote><blockquote><p>创建仓库并提交代码</p><pre><code>* git init* git remote add origin git@github.***.com:xxxx/***.git* git add -A* git commit -am&quot;首次建立项目提交&quot;* git push origin -u origin master</code></pre></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;会出现的问题-首次空的提交远程master分支报错&quot;&gt;&lt;a href=&quot;#会出现的问题-首次空的提交远程master分支报错&quot; class=&quot;headerlink&quot; title=&quot;会出现的问题 首次空的提交远程master分支报错:&quot;&gt;&lt;/a&gt;会出现的问题 首次空
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>golang 逃逸分析</title>
    <link href="http://yoursite.com/2019/05/07/golang%20%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/07/golang 逃逸分析/</id>
    <published>2019-05-07T03:19:45.000Z</published>
    <updated>2019-05-07T03:36:26.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="golang-逃逸分析"><a href="#golang-逃逸分析" class="headerlink" title="golang 逃逸分析"></a>golang 逃逸分析</h3><h4 id="什么叫做golang的逃逸分析"><a href="#什么叫做golang的逃逸分析" class="headerlink" title="什么叫做golang的逃逸分析"></a>什么叫做golang的逃逸分析</h4><blockquote><p>逃逸分析是确定指针动态范围的方法,可以分析在程序的哪些地方可以访问指针.<br>当一个变量(或对象)在子程序中被分配,一个指向变量的指针可能逃逸到其他执行线程中,或者去调用子程序.如果使用尾递归优化,对象也可能逃逸到被调用的子程序中.如果一个程序分配一个对象并返回一个该对象的指针,该对象可能在程序中的任何一个地方被访问到,这样指针就成功逃逸了.</p></blockquote><blockquote><p>如果指针存储在全局变量或者其他数据结构中,也可能发生逃逸,这种情况是当前程序中的指针逃逸.逃逸分析需要确定指针所有可以存储的地方,保证指针的生命周期只在当前进程或线程中.</p></blockquote><h4 id="逃逸分析的好处"><a href="#逃逸分析的好处" class="headerlink" title="逃逸分析的好处"></a>逃逸分析的好处</h4><ul><li><ol><li>减少gc压力,不逃逸的对象分配在栈上,当函数返回时就回收了资源,不需要gc标记清楚</li></ol></li><li><ol start="2"><li>逃逸分析完以后可以确定哪些变量可以分配在栈上,栈的分配比堆快,性能更好</li></ol></li><li><ol start="3"><li>同步消除</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;golang-逃逸分析&quot;&gt;&lt;a href=&quot;#golang-逃逸分析&quot; class=&quot;headerlink&quot; title=&quot;golang 逃逸分析&quot;&gt;&lt;/a&gt;golang 逃逸分析&lt;/h3&gt;&lt;h4 id=&quot;什么叫做golang的逃逸分析&quot;&gt;&lt;a href=&quot;#什么
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang nsq实时消息处理系统源码解读一一基本介绍</title>
    <link href="http://yoursite.com/2019/05/06/golang%20nsq/"/>
    <id>http://yoursite.com/2019/05/06/golang nsq/</id>
    <published>2019-05-06T07:42:45.000Z</published>
    <updated>2019-05-07T03:38:40.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于golang中nsq实时消息处理系统的背景介绍"><a href="#关于golang中nsq实时消息处理系统的背景介绍" class="headerlink" title="关于golang中nsq实时消息处理系统的背景介绍"></a>关于golang中nsq实时消息处理系统的背景介绍</h4><blockquote><p>NSQ是由知名短链接服务商bitly用Go语言开发的实时消息处理系统，具有高性能、高可靠、无视单点故障等优点，是一个非常不错的新兴的消息队列解决方案; </p></blockquote><blockquote><p>nsg易于配置和部署，所有参考都通过命令行指定，编译好的二进制文件，没有其它依赖项。而且支持多种消息格式。</p></blockquote><blockquote><p><a href="https://github.com/bitly/nsq" target="_blank" rel="noopener">源码下载地址</a></p></blockquote><blockquote><p>本系列文档下载的源码为0.2.27版本</p></blockquote><blockquote><p>为了更好的理解源码,最理想的起步当然是先了解nsq的用法, 所以接下来会先讲解nsq的安装和使用</p></blockquote><h4 id="nsq的安装"><a href="#nsq的安装" class="headerlink" title="nsq的安装"></a>nsq的安装</h4><ul><li><p>1.安装golang的环境</p></li><li><p>2.安装godep,在命令行执行: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/kr/godep</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果使用go get安装过程中报错,可以参考另一篇文章:关于go get安装git golang项目时报错的处理办法<br>安装之后,在$GOPATH/bin目录下面就可以看到有godep 的可执行文件,记得讲$GOPATH/bin目录环境配置到系统环境变量$PATH里面,以后在命令行就可以直接输入godep命令来执行一些操作了.</p></blockquote><ul><li><p>3.安装assert,在命令行执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/bmizerany/assert</span><br></pre></td></tr></table></figure></li><li><p>4.接下来开始获取nsq的代码并编译, 在命令行执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ godep get github.com/bitly/nsq/...</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意: 后面有三个点不能少, 执行完之后在$GOPATH/bin目录下面就会看到有很多nsq打头的可执行二进制文件存在,至此安装就结束了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于golang中nsq实时消息处理系统的背景介绍&quot;&gt;&lt;a href=&quot;#关于golang中nsq实时消息处理系统的背景介绍&quot; class=&quot;headerlink&quot; title=&quot;关于golang中nsq实时消息处理系统的背景介绍&quot;&gt;&lt;/a&gt;关于golang中ns
      
    
    </summary>
    
    
      <category term="goalng nsq" scheme="http://yoursite.com/tags/goalng-nsq/"/>
    
  </entry>
  
  <entry>
    <title>golang 中关于数组的相关特性</title>
    <link href="http://yoursite.com/2019/05/06/golang%20array/"/>
    <id>http://yoursite.com/2019/05/06/golang array/</id>
    <published>2019-05-06T07:42:45.000Z</published>
    <updated>2019-05-06T07:42:59.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="golang-中关于数组的相关特性"><a href="#golang-中关于数组的相关特性" class="headerlink" title="golang 中关于数组的相关特性"></a>golang 中关于数组的相关特性</h4><ul><li><p>值类型 </p><blockquote><p>作为参数传递时 不能修改其值 只是一种拷贝 而且还需要特别注意的就是 不同长度的数组类型不一样 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果打印出来的应该仍然还是1，2，3</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果想要改变的话 需要使用指针传递作为参数 但是常见的是使用 slice 切片 自动可以修改原来的数据</p></li><li><p>数组类型跟长度有关系 可以定义[…]int 让编译器自己去判断数组长度</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;golang-中关于数组的相关特性&quot;&gt;&lt;a href=&quot;#golang-中关于数组的相关特性&quot; class=&quot;headerlink&quot; title=&quot;golang 中关于数组的相关特性&quot;&gt;&lt;/a&gt;golang 中关于数组的相关特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;值
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>etcd在mac系统中的安装与使用</title>
    <link href="http://yoursite.com/2019/05/06/golang%20mac%20etcd%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/06/golang mac etcd安装与使用/</id>
    <published>2019-05-06T07:41:45.000Z</published>
    <updated>2019-05-06T07:50:25.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd在mac系统中的安装与使用"><a href="#etcd在mac系统中的安装与使用" class="headerlink" title="etcd在mac系统中的安装与使用"></a>etcd在mac系统中的安装与使用</h3><ul><li>进入<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">etcd官网</a>提供的连接， 点击GitHub Project, 然后选择release版本下载编译好的版本代码包</li><li>解压下载好的代码包</li><li>cd 进入解压后的代码包</li><li>启动server端 nohup ./etcd –listen-client-urls ‘<a href="http://0.0.0.0:2379&#39;" target="_blank" rel="noopener">http://0.0.0.0:2379&#39;</a> –advertise-client-urls ‘<a href="http://0.0.0.0:2379&#39;" target="_blank" rel="noopener">http://0.0.0.0:2379&#39;</a> &amp;</li><li>client客户端连接使用 </li><li>ETCDCTL_API=3 ./etcdctl put “name” “fengjun”</li><li>ETCDCTL_API=3 ./etcdctl get “name”</li></ul><h4 id="etcd特性总结"><a href="#etcd特性总结" class="headerlink" title="etcd特性总结"></a>etcd特性总结</h4><ul><li>对于key前缀相同的有序排列存储在系统中</li></ul><blockquote><p>例如:</p><ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job1” “{…job1}”<ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job2” “{…job2}”</li></ul></li></ul></blockquote><ul><li><p>然后可以按照key前缀设置来查找集合</p><blockquote><p>ETCDCTL_API=3 ./etcdctl get “/cron/jobs/“ –prefix</p><ul><li>/cron/jobs/job1</li><li>{…job1}</li><li>/cron/jobs/job2</li><li>{…job2}</li></ul></blockquote></li><li><p>在新开的终端会话界面使用watch命令检测 进入解压后的文件夹中</p><blockquote><p>ETCDCTL_API=3 ./etcdctl watch “/cron/jobs/“ –prefix</p><ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job2” “{…1111}” //修改</li><li>新开的终端会显示:<br>PUT<br>/cron/jobs/job2<br>{…1111}</li></ul></blockquote></li><li><p>获取etcd golang客户端的代码 在上面打开的etcd<a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">github项目代码</a>里面 <a href="https://github.com/etcd-io/etcd/tree/master/clientv3" target="_blank" rel="noopener">clientv3</a></p><blockquote><p>etcd/clientv3 is the official Go etcd client for v3.<br>  golang安装客户端代码方式<br>  Install<br>  go get github.com/coreos/etcd/client  //或者使用gopm工具 或者进入golang中国下载该包 然后入项目中</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;etcd在mac系统中的安装与使用&quot;&gt;&lt;a href=&quot;#etcd在mac系统中的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;etcd在mac系统中的安装与使用&quot;&gt;&lt;/a&gt;etcd在mac系统中的安装与使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;a
      
    
    </summary>
    
    
      <category term="goalng etcd mac" scheme="http://yoursite.com/tags/goalng-etcd-mac/"/>
    
  </entry>
  
  <entry>
    <title>golang 字符串处理</title>
    <link href="http://yoursite.com/2019/05/06/golang%20string/"/>
    <id>http://yoursite.com/2019/05/06/golang string/</id>
    <published>2019-05-06T07:41:45.000Z</published>
    <updated>2019-05-06T07:48:44.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置"><a href="#字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置" class="headerlink" title="字符和字符串处理相关常见操作 特别是对于中文字符的处理以及全球不同字符的处置"></a>字符和字符串处理相关常见操作 特别是对于中文字符的处理以及全球不同字符的处置</h3><h4 id="golang中string实现的背景介绍"><a href="#golang中string实现的背景介绍" class="headerlink" title="golang中string实现的背景介绍"></a>golang中string实现的背景介绍</h4><blockquote><p>golang中string底层是通过byte数组实现的。中文字符在unicode下占2个字节，在utf-8编码下占3个字节，而golang默认编码正好是utf-8。</p></blockquote><blockquote><p>关于golang中的rune:<br>// rune is an alias for int32 and is equivalent to int32 in all ways. It is<br>// used, by convention, to distinguish character values from integer values.</p></blockquote><p>//int32的别名，几乎在所有方面等同于int32<br>//它用来区分字符值和整数值</p><p>type rune = int32</p><ul><li>获取字节数长度 len 特别记住这一点 len(s)返回的是底层的字节数 英文占一个字节 中文字符在golang中占有两个字节 并不是获得字符串长度</li><li>关于utf-8和rune的互相转换</li><li>关于含有中文字符串的对于每一个中文字符的遍历处理 强制转换该字符串变成一个[]rune数组</li><li>计算字节数</li><li>使用range遍历pos, rune pos会不连续</li><li>使用[]byte转换获得字节</li><li>使用utf8.RuneCountInStriung获得字符数量</li></ul><h4 id="golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于："><a href="#golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：" class="headerlink" title="golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于："></a>golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：</h4><blockquote><ul><li>byte 等同于int8，常用来处理ascii字符</li><li>rune 等同于int32,常用来处理unicode或utf-8字符</li></ul></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Yes我爱慕课网!"</span>  <span class="comment">//UTF-8编码方式 中文 可变长编码方式 英文是一字节方式 中文是3字节方式存储</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">//查看字符的具体存储 X打出字节的具体数字 16进制 每个字符的ascii码值</span></span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> []<span class="keyword">byte</span>(s) &#123; <span class="comment">//utf-8编码</span></span><br><span class="line">fmt.Println(<span class="string">"%X\n"</span>, b)   </span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123;  <span class="comment">//unicode编码 i是每个字符的开始字节数 ch is a rune(int32) 一个四字节的整数</span></span><br><span class="line">fmt.Printf(<span class="string">"(%d %X)"</span>, i , ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Rune count:"</span>,</span><br><span class="line">utf8.RuneCountInString(s))   <span class="comment">//获取rune个数 也是获取字符串长度的方法之一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="keyword">rune</span>(s) &#123;  <span class="comment">//获得一个rune数组 一个下标一个英文字符或者一个中文字符 获取字符串长度方法二</span></span><br><span class="line">fmt.Println(<span class="string">"(%d %c"</span>), i, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">bytes := []bytes(s)   <span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">ch, size := utf8.DecodeRune(bytes)</span><br><span class="line">fmt.Printf(<span class="string">"(%c %v)"</span>, ch, size)</span><br><span class="line">bytes = bytes[size:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">Yes我爱慕课网!</span><br><span class="line"><span class="number">59</span><span class="number">65</span><span class="number">73</span>E6<span class="number">88</span><span class="number">91</span>E7<span class="number">88</span>B1E6<span class="number">85</span><span class="number">95</span>E8AFBEE7BD<span class="number">91</span><span class="number">21</span><span class="comment">//utf-8编码</span></span><br><span class="line">(<span class="number">0</span> <span class="number">59</span>)(<span class="number">1</span> <span class="number">65</span>)(<span class="number">2</span> <span class="number">73</span>)(<span class="number">3</span> <span class="number">6211</span>)(<span class="number">6</span> <span class="number">7231</span>)(<span class="number">9</span> <span class="number">6155</span>)(<span class="number">12</span> <span class="number">8</span>BFE)(<span class="number">15</span> <span class="number">7</span>F51)(<span class="number">18</span> <span class="number">21</span>)   <span class="comment">//unicode编码</span></span><br><span class="line">(<span class="number">0</span> Y)(<span class="number">1</span> e)(<span class="number">2</span> s)(<span class="number">3</span> 我)(<span class="number">4</span> 爱)(<span class="number">5</span> 慕)(<span class="number">6</span> 课)(<span class="number">7</span> 网)(<span class="number">8</span> !)    <span class="comment">//第几个字符是谁</span></span><br><span class="line">(Y <span class="number">1</span>)(e <span class="number">1</span>)(s <span class="number">1</span>)(我 <span class="number">3</span>)(爱 <span class="number">3</span>)(慕 <span class="number">3</span>)(课 <span class="number">3</span>)(网 <span class="number">3</span>)(! <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"hello 你好"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//golang中string底层是通过byte数组实现的，座椅直接求len 实际是在按字节长度计算  所以一个汉字占3个字节算了3个长度</span></span><br><span class="line">    fmt.Println(<span class="string">"len(str):"</span>, <span class="built_in">len</span>(str))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下两种都可以得到str的字符串长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//golang中的unicode/utf8包提供了用utf-8获取长度的方法</span></span><br><span class="line">    fmt.Println(<span class="string">"RuneCountInString:"</span>, utf8.RuneCountInString(str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过rune类型处理unicode字符</span></span><br><span class="line">    fmt.Println(<span class="string">"rune:"</span>, <span class="built_in">len</span>([]<span class="keyword">rune</span>(str)))</span><br><span class="line">&#125;</span><br><span class="line">运行结果:</span><br><span class="line"><span class="built_in">len</span>(str): <span class="number">12</span></span><br><span class="line">RuneCountInString: <span class="number">8</span></span><br><span class="line"><span class="keyword">rune</span>: <span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置&quot;&gt;&lt;a href=&quot;#字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置&quot; class=&quot;headerlink&quot; title=&quot;字符和字符串处理相关常见操作 特
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang字符串时间戳转换成time.Time类型</title>
    <link href="http://yoursite.com/2019/05/06/golang%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E6%88%90time.Time%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/06/golang字符串时间戳转换成time.Time类型/</id>
    <published>2019-05-06T07:09:45.000Z</published>
    <updated>2019-05-06T07:21:05.302Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间转换的原理是"><a href="#时间转换的原理是" class="headerlink" title="时间转换的原理是:"></a>时间转换的原理是:</h4><blockquote><p>将原先的字符串时间戳转换为int64位, 再使用time.Unix(v, 0)转换成time类型的时间戳</p></blockquote><h4 id="需要相关使用的函数有"><a href="#需要相关使用的函数有" class="headerlink" title="需要相关使用的函数有:"></a>需要相关使用的函数有:</h4><ul><li>unix64, _ := strconv.ParseInt(unixStr, 10, 64)</li><li>time.Unix(v, 0)</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime time.Time</span><br><span class="line">startTimeInt64, _ := strconv.ParseInt(start, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">startTime = time.Unix(startTimeInt64, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;时间转换的原理是&quot;&gt;&lt;a href=&quot;#时间转换的原理是&quot; class=&quot;headerlink&quot; title=&quot;时间转换的原理是:&quot;&gt;&lt;/a&gt;时间转换的原理是:&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;将原先的字符串时间戳转换为int64位, 再使用time.Un
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang字符串处理</title>
    <link href="http://yoursite.com/2019/05/06/golang%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/06/golang字符串处理/</id>
    <published>2019-05-06T06:12:01.000Z</published>
    <updated>2019-05-06T07:21:49.157Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于golang中字符串处理相关注意事项"><a href="#关于golang中字符串处理相关注意事项" class="headerlink" title="关于golang中字符串处理相关注意事项"></a>关于golang中字符串处理相关注意事项</h4><blockquote><p>len(str) 获得是该字符串的字节数<br>中文字符占3个字节 英文字母占一个字节<br>如果想要获得数组 一个下标一个中文字符或者英文字符的话,需要使用[]rune()来强制转换</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于golang中字符串处理相关注意事项&quot;&gt;&lt;a href=&quot;#关于golang中字符串处理相关注意事项&quot; class=&quot;headerlink&quot; title=&quot;关于golang中字符串处理相关注意事项&quot;&gt;&lt;/a&gt;关于golang中字符串处理相关注意事项&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/05/06/hello-world/"/>
    <id>http://yoursite.com/2019/05/06/hello-world/</id>
    <published>2019-05-06T05:10:58.498Z</published>
    <updated>2019-05-06T05:10:58.498Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
