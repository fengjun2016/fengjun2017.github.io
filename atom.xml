<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-16T10:08:19.772Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang leetcode刷题-07</title>
    <link href="http://yoursite.com/2019/09/16/leetcode_3/"/>
    <id>http://yoursite.com/2019/09/16/leetcode_3/</id>
    <published>2019-09-16T10:20:45.000Z</published>
    <updated>2019-09-16T10:08:19.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-刷题-07"><a href="#leetcode-刷题-07" class="headerlink" title="leetcode 刷题 07"></a>leetcode 刷题 07</h2><ul><li>题目描述</li><li>golang实现</li><li>解题思路总结</li></ul><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p></blockquote><p>示例 1:</p><p>输入: 123<br>输出: 321<br> 示例 2:</p><p>输入: -123<br>输出: -321<br>示例 3:</p><p>输入: 120<br>输出: 21<br>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h6 id="golang-实现"><a href="#golang-实现" class="headerlink" title="golang 实现"></a>golang 实现</h6><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> x != <span class="number">0</span> &#123;</span><br><span class="line">        num = num * <span class="number">10</span>  + x % <span class="number">10</span></span><br><span class="line">        x = x/<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    MaxInt32 := <span class="number">1</span>&lt;&lt;<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">    MinInt32 := <span class="number">-1</span> &lt;&lt; <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; MaxInt32 || num &lt; MinInt32 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="golang踩坑"><a href="#golang踩坑" class="headerlink" title="golang踩坑"></a>golang踩坑</h6><blockquote><p>无</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode-刷题-07&quot;&gt;&lt;a href=&quot;#leetcode-刷题-07&quot; class=&quot;headerlink&quot; title=&quot;leetcode 刷题 07&quot;&gt;&lt;/a&gt;leetcode 刷题 07&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;题目描述&lt;/li&gt;
&lt;li&gt;go
      
    
    </summary>
    
    
      <category term="golang leetcode" scheme="http://yoursite.com/tags/golang-leetcode/"/>
    
  </entry>
  
  <entry>
    <title>golang leetcode刷题-02</title>
    <link href="http://yoursite.com/2019/09/16/leetcode_2/"/>
    <id>http://yoursite.com/2019/09/16/leetcode_2/</id>
    <published>2019-09-16T10:09:45.000Z</published>
    <updated>2019-09-16T10:16:20.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-刷题-02"><a href="#leetcode-刷题-02" class="headerlink" title="leetcode 刷题 02"></a>leetcode 刷题 02</h2><ul><li>题目描述</li><li>golang实现</li><li>解题思路总结</li></ul><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p></blockquote><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h6 id="golang-实现"><a href="#golang-实现" class="headerlink" title="golang 实现"></a>golang 实现</h6><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    result := <span class="built_in">new</span>(ListNode)</span><br><span class="line">    point := result</span><br><span class="line">    carry := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span>) &#123;</span><br><span class="line">        l1Data := <span class="number">0</span></span><br><span class="line">        l2Data := <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">            l1Data = l1.Val</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            l2Data = l2.Val</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sum := l1Data + l2Data + carry</span><br><span class="line">        carry = sum / <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">        node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = sum % <span class="number">10</span></span><br><span class="line">        node.Next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用的是尾插法</span></span><br><span class="line">        point.Next = node</span><br><span class="line">        point = point.Next <span class="comment">//移位</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">            l1 = l1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            l2 = l2.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> carry == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> lastNode ListNode</span><br><span class="line">        lastNode.Val = carry</span><br><span class="line">        lastNode.Next = <span class="literal">nil</span></span><br><span class="line">        point.Next = &amp;lastNode</span><br><span class="line">        point = point.Next <span class="comment">//移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="golang踩坑"><a href="#golang踩坑" class="headerlink" title="golang踩坑"></a>golang踩坑</h6><blockquote><ol><li>注意这里要使用一个带头指针的单链表用于操作才行 所以最后返回必须是 result.Next 头指针的下一个指针</li></ol></blockquote><blockquote><ol start="2"><li>由于要保持顺序和输入的顺序一致 所以要使用尾插法 来创建相加之后的链表结果</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode-刷题-02&quot;&gt;&lt;a href=&quot;#leetcode-刷题-02&quot; class=&quot;headerlink&quot; title=&quot;leetcode 刷题 02&quot;&gt;&lt;/a&gt;leetcode 刷题 02&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;题目描述&lt;/li&gt;
&lt;li&gt;go
      
    
    </summary>
    
    
      <category term="golang leetcode" scheme="http://yoursite.com/tags/golang-leetcode/"/>
    
  </entry>
  
  <entry>
    <title>golang leetcode刷题-01</title>
    <link href="http://yoursite.com/2019/08/16/leetcode_1/"/>
    <id>http://yoursite.com/2019/08/16/leetcode_1/</id>
    <published>2019-08-16T10:09:45.000Z</published>
    <updated>2019-08-16T10:26:19.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-刷题-01"><a href="#leetcode-刷题-01" class="headerlink" title="leetcode 刷题 01"></a>leetcode 刷题 01</h2><ul><li>题目描述</li><li>golang实现</li><li>解题思路总结</li></ul><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><blockquote><p>定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p></blockquote><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h6 id="golang-实现"><a href="#golang-实现" class="headerlink" title="golang 实现"></a>golang 实现</h6><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    intMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        com := target - nums[i]</span><br><span class="line">        <span class="keyword">if</span> _, ok := intMap[com]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="keyword">int</span>&#123;i, intMap[com]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        intMap[nums[i]] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    intMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i, vi := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        com := target - vi</span><br><span class="line">        <span class="keyword">if</span> _, ok := intMap[com]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="keyword">int</span>&#123;i, intMap[com]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        intMap[vi] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="golang踩坑"><a href="#golang踩坑" class="headerlink" title="golang踩坑"></a>golang踩坑</h6><blockquote><p>1.注意map 必须要是用make()来声明创造空间才能往里面写数据<br>  如果只是单纯的声明一个map变量是无法往map里面添加数据的 会报错 assign entry to nil map</p></blockquote><blockquote><p>2.注意上面往map里面添加数据必须放在检查map里面有没有的后面 否则出现 6 [3 2 4] 就出错了</p></blockquote><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><ul><li>暴力破解 o(n^2)</li><li>使用两次hashmap o(n) 但是浪费空间</li><li>使用一次hashmap o(n) 不浪费空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode-刷题-01&quot;&gt;&lt;a href=&quot;#leetcode-刷题-01&quot; class=&quot;headerlink&quot; title=&quot;leetcode 刷题 01&quot;&gt;&lt;/a&gt;leetcode 刷题 01&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;题目描述&lt;/li&gt;
&lt;li&gt;go
      
    
    </summary>
    
    
      <category term="golang leetcode" scheme="http://yoursite.com/tags/golang-leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gorm 嵌套子查询使用实例记录</title>
    <link href="http://yoursite.com/2019/08/16/gorm%20%E5%B5%8C%E5%A5%97%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2019/08/16/gorm 嵌套子查询/</id>
    <published>2019-08-16T09:05:45.000Z</published>
    <updated>2019-08-16T09:15:25.718Z</updated>
    
    <content type="html"><![CDATA[<h4 id="废话不多说-直接上代码演示效果"><a href="#废话不多说-直接上代码演示效果" class="headerlink" title="废话不多说 直接上代码演示效果"></a>废话不多说 直接上代码演示效果</h4><blockquote><p>子查询<br>    使用 *gorm.expr 进行子查询<br>    // 后面是等价的实际的sql语句</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">"amount &gt; ?"</span>, DB.Table(<span class="string">"orders"</span>).Select(<span class="string">"AVG(amount)"</span>).Where(<span class="string">"state = ?"</span>, <span class="string">"paid"</span>).QueryExpr()).Find(&amp;orders)</span><br><span class="line"><span class="comment">// SELECT * FROM "orders"  WHERE "orders"."deleted_at" IS NULL AND (amount &gt; (SELECT AVG(amount) FROM "orders"  WHERE (state = 'paid')));</span></span><br></pre></td></tr></table></figure><blockquote><p>项目当中实际使用的场景<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span> <span class="title">ListUnFavor</span><span class="params">(offDisplay []<span class="keyword">string</span>, rawQuery <span class="keyword">string</span>, rawOrder <span class="keyword">string</span>, offset <span class="keyword">int</span>, limit <span class="keyword">int</span>)</span> <span class="params">(*[]User, <span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">users := []User&#123;&#125;</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">db := app.DB.Model(user)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(offDisplay) != <span class="number">0</span> &#123;</span><br><span class="line">db.Where(<span class="string">"`user`.id not in (?)"</span>, offDisplay)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">"`user`.id not in (?)"</span>, app.DB.Model(UserFollow&#123;&#125;).Select(<span class="string">"user_id"</span>).Where(<span class="string">"`user_follow`.user_id = ? "</span>, user.Id).QueryExpr()).</span><br><span class="line">Preload(<span class="string">"UserPhone"</span>).Preload(<span class="string">"UserInfo"</span>)</span><br><span class="line"></span><br><span class="line">db, err := buildWhere(rawQuery, db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;users, total, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db, err = buildOrder(rawOrder, db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;users, total, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Offset(offset).</span><br><span class="line">Limit(limit).</span><br><span class="line">Find(&amp;users).</span><br><span class="line">Count(&amp;total)</span><br><span class="line"></span><br><span class="line">err = db.Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;users, total, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;废话不多说-直接上代码演示效果&quot;&gt;&lt;a href=&quot;#废话不多说-直接上代码演示效果&quot; class=&quot;headerlink&quot; title=&quot;废话不多说 直接上代码演示效果&quot;&gt;&lt;/a&gt;废话不多说 直接上代码演示效果&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;子查询&lt;b
      
    
    </summary>
    
    
      <category term="golang es" scheme="http://yoursite.com/tags/golang-es/"/>
    
  </entry>
  
  <entry>
    <title>golang elastic search 使用教程记录</title>
    <link href="http://yoursite.com/2019/08/16/golang%20elastic%20search/"/>
    <id>http://yoursite.com/2019/08/16/golang elastic search/</id>
    <published>2019-08-16T06:44:45.000Z</published>
    <updated>2019-08-16T06:45:09.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>记录一次同事写的关于数字金额的bug经历</title>
    <link href="http://yoursite.com/2019/08/16/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1review%E5%90%8C%E4%BA%8B%E4%BB%A3%E7%A0%81%E7%9A%84bug/"/>
    <id>http://yoursite.com/2019/08/16/记录一次review同事代码的bug/</id>
    <published>2019-08-16T06:09:45.000Z</published>
    <updated>2019-08-16T08:36:20.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>一次偶然的机会 我跟同事两个人都提交了同一个项目的合并请求, 然后我就顺便看了一眼他的提交变化历史<br>,但是没有仔细在意,然后后面在使用支付购买商品的时候,发现0.01的价值商品竟然无法购买, 支付宝提示交易金额异常,然后就发现他代码改动有写不对, 下面展示相关代码:和其改变提交代码的历史</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.TotalAmount = fmt.Sprintf(<span class="string">"%.2f"</span>, <span class="keyword">float64</span>(price/<span class="number">100</span>))</span><br><span class="line">p.TotalAmount = fmt.Sprintf(<span class="string">"%.2f"</span>, <span class="keyword">float64</span>(price)/<span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>从上面的内容可以看到 他把float64的括号移动了一个位置,然后/是整数除法 如果price是一个int类型的话, 那么且price int 型还小于100 那么就会得到一个 0.00的金额 传到支付宝支付接口, 从而会导致金额异常 所以记录这一次同事的bug 并以此为戒</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;一次偶然的机会 我跟同事两个人都提交了同一个项目的合并请求, 然后我就顺便看了一眼他的提交变化历史&lt;br&gt;,但是没
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>对从rpc获取来的二进制数据进行反解析成结构体进行二次处理</title>
    <link href="http://yoursite.com/2019/08/15/%E5%AF%B9%E4%BB%8Erpc%E8%8E%B7%E5%8F%96%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%8D%E8%A7%A3%E6%9E%90%E6%88%90%E7%BB%93%E6%9E%84%E4%BD%93%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/15/对从rpc获取来的数据进行反解析成结构体处理/</id>
    <published>2019-08-15T07:48:53.000Z</published>
    <updated>2019-08-16T08:08:25.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对从rpc里面获取的数据进一步处理-业务当中处理过字段缺省问题"><a href="#对从rpc里面获取的数据进一步处理-业务当中处理过字段缺省问题" class="headerlink" title="对从rpc里面获取的数据进一步处理 业务当中处理过字段缺省问题"></a>对从rpc里面获取的数据进一步处理 业务当中处理过字段缺省问题</h2><blockquote><p>因为需要对从rpc里面获取的二进制数据解析成结构体 进行进一步的处理 所以这里需要进一步<br>  处理成自定义的结构体<br>  我在业务当中主要是由于要处理 字段是默认值 然后会被rpc在二进制流传输的过程中缺省的问题<br>  代码示例:</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"blog-server/pkg/util"</span></span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"blog-server/model"</span></span><br><span class="line"><span class="string">"blog-server/pkg"</span></span><br><span class="line"><span class="string">"blog-server/rpc"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/jsonpb"</span></span><br><span class="line"><span class="string">"github.com/ivpusic/neo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pbMarshaler jsonpb.Marshaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">pbMarshaler = jsonpb.Marshaler&#123;</span><br><span class="line">EmitDefaults: <span class="literal">true</span>,</span><br><span class="line">OrigName:     <span class="literal">true</span>,</span><br><span class="line">EnumsAsInts:  <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与proto定义字段 用于反序列化 解决protoc3协议缺省字段问题</span></span><br><span class="line"><span class="keyword">type</span> RpcProduct <span class="keyword">struct</span> &#123;</span><br><span class="line">Id           <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">UserId       <span class="keyword">string</span> <span class="string">`json:"userId"`</span></span><br><span class="line">CategoryId   <span class="keyword">string</span> <span class="string">`json:"categoryId"`</span></span><br><span class="line">CollectionId <span class="keyword">string</span> <span class="string">`json:"collectionId"`</span></span><br><span class="line">Title        <span class="keyword">string</span> <span class="string">`json:"title"`</span></span><br><span class="line">Price        <span class="keyword">string</span> <span class="string">`json:"price"`</span></span><br><span class="line">Freight      <span class="keyword">string</span> <span class="string">`json:"freight"`</span></span><br><span class="line">Stock        <span class="keyword">string</span> <span class="string">`json:"stock"`</span></span><br><span class="line">Cover        <span class="keyword">string</span> <span class="string">`json:"cover"`</span></span><br><span class="line">Desc         <span class="keyword">string</span> <span class="string">`json:"desc"`</span></span><br><span class="line">Images       <span class="keyword">string</span> <span class="string">`json:"images"`</span></span><br><span class="line">Tags         <span class="keyword">string</span> <span class="string">`json:"tags"`</span></span><br><span class="line">Status       <span class="keyword">string</span> <span class="string">`json:"status"`</span></span><br><span class="line">CreatedAt    <span class="keyword">string</span> <span class="string">`json:"createdAt"`</span></span><br><span class="line">UpdatedAt    <span class="keyword">string</span> <span class="string">`json:"updatedAt"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListMyFollowWithProducts</span><span class="params">(c *neo.Ctx)</span> <span class="params">(i <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">blog := &amp;model.Blog&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">currentUserId := c.Req.Header.Get(<span class="string">"user_id"</span>)</span><br><span class="line">pageParam := pkg.DefaultQuery(c, <span class="string">"page"</span>, <span class="string">"-1"</span>)</span><br><span class="line">pageSizeParam := pkg.DefaultQuery(c, <span class="string">"pageSize"</span>, <span class="string">"-1"</span>)</span><br><span class="line"></span><br><span class="line">pageInt, err := strconv.Atoi(pageParam)</span><br><span class="line">pageSizeInt, err := strconv.Atoi(pageSizeParam)</span><br><span class="line"></span><br><span class="line">offset := pageInt * pageSizeInt</span><br><span class="line">limit := pageSizeInt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> offset &lt; <span class="number">0</span> &#123;</span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currentUserId == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.StatusBadRequest, c.Res.Json(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"total"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"data"</span>:  <span class="string">""</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rawQuery := <span class="string">"status:=:published,reviewed:=:1"</span></span><br><span class="line">rawOrder := <span class="string">"created_at:desc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rpc获取我关注的用户id集合</span></span><br><span class="line">rpcGetFollowRes, err := rpc.GetMyFollowUsers(currentUserId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"rpc get my follow users userId-err:"</span>, currentUserId, err)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">followUserIds := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">followUserIdsStr := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> rpcGetFollowRes.MyFollowUsers &#123;</span><br><span class="line"><span class="keyword">if</span> u.UserId != <span class="string">""</span> &amp;&amp; u.UserId != currentUserId &#123;</span><br><span class="line">followUserIds = <span class="built_in">append</span>(followUserIds, u.UserId)</span><br><span class="line">followUserIdsStr = followUserIdsStr + <span class="string">","</span> + u.UserId</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blogs, _, err := blog.ListForAdmin(<span class="literal">true</span>, followUserIds, rawQuery, rawOrder, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"get my follow users blog userId-err:"</span>, currentUserId, err)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rpc获取products</span></span><br><span class="line">rpcGetMyFollowProductsRes, err := rpc.GetMyFollowProducts(followUserIdsStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"rpc get my follow products followUserIdsStr-err:"</span>, followUserIdsStr, err)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">products := rpcGetMyFollowProductsRes.Products</span><br><span class="line"></span><br><span class="line"><span class="comment">//rpc获取collections</span></span><br><span class="line">rpcGetMyFollowCollectionsRes, err := rpc.GetMyFollowCollections(followUserIdsStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"rpc get my follow collections followUserIdsStr-err:"</span>, followUserIdsStr, err)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">collections := rpcGetMyFollowCollectionsRes.Collections</span><br><span class="line"></span><br><span class="line">blogsLength := <span class="built_in">len</span>(*blogs)</span><br><span class="line">productsLength := <span class="built_in">len</span>(products)</span><br><span class="line">collectionsLength := <span class="built_in">len</span>(collections)</span><br><span class="line"></span><br><span class="line">timeTemplate := <span class="string">"2006-01-02T15:04:05Z07:00"</span></span><br><span class="line">response := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> *blogs &#123;</span><br><span class="line">bRes := blogStructToMap(b)</span><br><span class="line">UserInfo := *rpc.GetUserInfo(b.UserId)</span><br><span class="line">UserInfo.Nick = util.BlockPhone(UserInfo.Nick)</span><br><span class="line">bRes[<span class="string">"user"</span>] = UserInfo</span><br><span class="line">response = <span class="built_in">append</span>(response, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"blog"</span>:        bRes,</span><br><span class="line"><span class="string">"craetedUnix"</span>: b.CreatedAt.Unix(),</span><br><span class="line"><span class="string">"isThumb"</span>:     CheckIsThumb(currentUserId, b.Id),</span><br><span class="line"><span class="string">"isStar"</span>:      CheckIsStar(currentUserId, b.Id),</span><br><span class="line"><span class="string">"dataType"</span>:    <span class="string">"blog"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> products &#123;</span><br><span class="line">pStamp, _ := time.ParseInLocation(timeTemplate, p.CreatedAt, time.Local)</span><br><span class="line">UserInfo := *rpc.GetUserInfo(p.UserId)</span><br><span class="line">UserInfo.Nick = util.BlockPhone(UserInfo.Nick)</span><br><span class="line"><span class="comment">// Unmarshal pb object</span></span><br><span class="line">rpcProduct := RpcProduct&#123;&#125;</span><br><span class="line">buffer := bytes.NewBuffer([]<span class="keyword">byte</span>&#123;&#125;)   <span class="comment">//关键步骤在这里</span></span><br><span class="line">pbMarshaler.Marshal(buffer, p)</span><br><span class="line">log.Println(<span class="string">"rpcProduct:"</span>, buffer)</span><br><span class="line">json.Unmarshal(buffer.Bytes(), &amp;rpcProduct)</span><br><span class="line">rpcProductMap := dealRpcResNumberDataType(rpcProduct)</span><br><span class="line">response = <span class="built_in">append</span>(response, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"product"</span>:     rpcProductMap,</span><br><span class="line"><span class="string">"craetedUnix"</span>: pStamp.Unix(),</span><br><span class="line"><span class="string">"user"</span>:        UserInfo,</span><br><span class="line"><span class="string">"isStar"</span>:      CheckIsStar(currentUserId, p.Id),</span><br><span class="line"><span class="string">"dataType"</span>:    <span class="string">"product"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> collections &#123;</span><br><span class="line">pStamp, _ := time.ParseInLocation(timeTemplate, c.CreatedAt, time.Local)</span><br><span class="line">UserInfo := *rpc.GetUserInfo(c.UserId)</span><br><span class="line">UserInfo.Nick = util.BlockPhone(UserInfo.Nick)</span><br><span class="line">response = <span class="built_in">append</span>(response, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"collection"</span>:  c,</span><br><span class="line"><span class="string">"craetedUnix"</span>: pStamp.Unix(),</span><br><span class="line"><span class="string">"user"</span>:        UserInfo,</span><br><span class="line"><span class="string">"dataType"</span>:    <span class="string">"collection"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total := blogsLength + productsLength + collectionsLength</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照创建时间进行排序</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total - <span class="number">1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := total - <span class="number">1</span>; j &gt; i; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> response[j][<span class="string">"craetedUnix"</span>].(<span class="keyword">int64</span>) &gt; response[j<span class="number">-1</span>][<span class="string">"craetedUnix"</span>].(<span class="keyword">int64</span>) &#123;</span><br><span class="line">temp := response[j<span class="number">-1</span>]</span><br><span class="line">response[j<span class="number">-1</span>] = response[j]</span><br><span class="line">response[j] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行分页处理</span></span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> limit &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> end <span class="keyword">int</span></span><br><span class="line"><span class="keyword">if</span> offset+limit &lt; total &#123;</span><br><span class="line">end = offset + limit</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">end = total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"offset-limit:"</span>, offset, limit)</span><br><span class="line"><span class="keyword">for</span> k := offset; k &lt; end; k++ &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, response[k])</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = response</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Json(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"total"</span>: total,</span><br><span class="line"><span class="string">"data"</span>:  result,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blogStructToMap</span><span class="params">(blog model.Blog)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">data[<span class="string">"id"</span>] = blog.Id</span><br><span class="line">data[<span class="string">"createdAt"</span>] = blog.CreatedAt</span><br><span class="line">data[<span class="string">"updatedAt"</span>] = blog.UpdatedAt</span><br><span class="line">data[<span class="string">"deletedAt"</span>] = blog.DeletedAt</span><br><span class="line">data[<span class="string">"type"</span>] = blog.Type</span><br><span class="line">data[<span class="string">"userId"</span>] = blog.UserId</span><br><span class="line">data[<span class="string">"title"</span>] = blog.Title</span><br><span class="line">data[<span class="string">"summary"</span>] = blog.Summary</span><br><span class="line">data[<span class="string">"cover"</span>] = blog.Cover</span><br><span class="line">data[<span class="string">"content"</span>] = blog.Content</span><br><span class="line">data[<span class="string">"thumbNum"</span>] = blog.ThumbNum</span><br><span class="line">data[<span class="string">"starNum"</span>] = blog.StarNum</span><br><span class="line">data[<span class="string">"location"</span>] = blog.Location</span><br><span class="line">data[<span class="string">"status"</span>] = blog.Status</span><br><span class="line">data[<span class="string">"from"</span>] = blog.From</span><br><span class="line">data[<span class="string">"sourceUrl"</span>] = blog.SourceUrl</span><br><span class="line">data[<span class="string">"sourceAuthor"</span>] = blog.SourceAuthor</span><br><span class="line">data[<span class="string">"remark"</span>] = blog.Remark</span><br><span class="line">data[<span class="string">"recommend"</span>] = blog.Recommend</span><br><span class="line">data[<span class="string">"reviewed"</span>] = blog.Reviewed</span><br><span class="line">data[<span class="string">"comments"</span>] = blog.Comments</span><br><span class="line">data[<span class="string">"tags"</span>] = blog.Tags</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将结构体转换成map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">structToMap</span><span class="params">(structData <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">structDataType := reflect.TypeOf(structData)</span><br><span class="line">structDataValue := reflect.ValueOf(structData)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; structDataType.NumField(); i++ &#123;</span><br><span class="line">data[structDataType.Field(i).Tag.Get(<span class="string">"json"</span>)] = structDataValue.Field(i).Interface()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dealRpcResNumberDataType</span><span class="params">(rpcProduct RpcProduct)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">data := structToMap(rpcProduct)</span><br><span class="line">data[<span class="string">"categoryId"</span>], _ = strconv.Atoi(data[<span class="string">"categoryId"</span>].(<span class="keyword">string</span>))</span><br><span class="line">data[<span class="string">"collectionId"</span>], _ = strconv.Atoi(data[<span class="string">"collectionId"</span>].(<span class="keyword">string</span>))</span><br><span class="line">data[<span class="string">"price"</span>], _ = strconv.Atoi(data[<span class="string">"price"</span>].(<span class="keyword">string</span>))</span><br><span class="line">data[<span class="string">"freight"</span>], _ = strconv.Atoi(data[<span class="string">"freight"</span>].(<span class="keyword">string</span>))</span><br><span class="line">data[<span class="string">"stock"</span>], _ = strconv.Atoi(data[<span class="string">"stock"</span>].(<span class="keyword">string</span>))</span><br><span class="line">data[<span class="string">"status"</span>], _ = strconv.Atoi(data[<span class="string">"status"</span>].(<span class="keyword">string</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对从rpc里面获取的数据进一步处理-业务当中处理过字段缺省问题&quot;&gt;&lt;a href=&quot;#对从rpc里面获取的数据进一步处理-业务当中处理过字段缺省问题&quot; class=&quot;headerlink&quot; title=&quot;对从rpc里面获取的数据进一步处理 业务当中处理过字段缺省问
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>redis实现倒计时自动取消(关闭)订单</title>
    <link href="http://yoursite.com/2019/07/25/%E5%80%92%E8%AE%A1%E6%97%B6%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/25/倒计时取消订单实现/</id>
    <published>2019-07-25T02:30:45.000Z</published>
    <updated>2019-08-16T06:23:29.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种思路"><a href="#几种思路" class="headerlink" title="几种思路"></a>几种思路</h2><ul><li>使用定时任务不断轮询取消，此种方式实现简单，但是存在一个问题，定时任务设置时间较短时，耗费资源，设置时间过长，则会导致有一些订单超过三小时很久才能取消，用户体验不好</li><li>在拉取我的订单时，进行判断然后做取消操作，此种方法，用户体验较好，但是在拉取订单列表的时候耦合了取消订单的操作，从系统的设计角度考虑不是很好。</li><li>使用DelayQueue队列和redis以及监听器设计，此种方式用户体验好，与其他功能耦合性低，但是用户量有所限制</li><li>数据库定时作业：写个存储过程实现订单后一个小时未付款则订单自动取消的功能，然后增加给数据库增加个维护计划定时执行这个存储过程。 此种方式用户体验好，与其他功能耦合性低，但是由于是写在数据库中，对外不可见，代码维护难度高</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>方式一、方式二都比较容易实现，这里不再讲述，本文讲述一下方式三的实现，方式四暂且不讲。</p><p>   在生成订单时，向Redis中增加一个KV键值对，K为订单号，或者订单id，保证通过K能定位到数据库中的某个订单即可，V可为任意值（后边会解释为什么V可为任意值）。</p><p>   假设，生成订单时向Redis中存放K为订单号，V也为订单号的键值对，并设置过期时间为30分装，如果该键值对在30分钟过期后能够发送给程序一个通知，或者执行一个方法，那么即可解决订单关闭问题。</p><p>   实现：通过监听Redis提供的过期队列来实现，监听过期队列后，如果Redis中某一个KV过期了，那么将向监听者发送消息，监听者可以获取到该键值对的K，注意，是获取不到V的，因为已经过期了，这就是上面所提到的，为什么要保证能通过K来定位到订单，而V为任意值即可。拿到K后，通过K定位订单，并判断其状态，如果是未支付，更新为关闭，或者取消状态即可。</p><blockquote><p>修改redis配置 </p><ul><li>登录进入redis-cli 客户端（需开启两个客户端窗口，便于查看key过期通知, 使用redis key 过期通知，需手动开启key过期通知功能：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> notify-keyspace-events Ex</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>启动监听key过期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; PSUBSCRIBE __keyevent@*__:expired</span><br><span class="line">1) <span class="string">"psubscribe"</span></span><br><span class="line">2) <span class="string">"__keyevent@*__:expired"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></li><li><p>再开启一个客户端,添加test为key,并设置5秒过期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; setex <span class="built_in">test</span> 5 <span class="built_in">test</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li><p>回到监听窗口,查看监听窗口key过期信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; PSUBSCRIBE __keyevent@*__:expired</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"psubscribe"</span></span><br><span class="line">2) <span class="string">"__keyevent@*__:expired"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">"pmessage"</span></span><br><span class="line">2) <span class="string">"__keyevent@*__:expired"</span></span><br><span class="line">3) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line">4) <span class="string">"test"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="golang具体代码实现"><a href="#golang具体代码实现" class="headerlink" title="golang具体代码实现"></a>golang具体代码实现</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"shop-server/app"</span></span><br><span class="line"><span class="string">"shop-server/model"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gomodule/redigo/redis"</span></span><br><span class="line"><span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ShopOrderCountDownPrefix = <span class="string">"shopServerOrderCountDown-"</span></span><br><span class="line"><span class="keyword">var</span> orderCountDownChannelTopic = <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="keyword">var</span> orderCountDownExpiredTime = <span class="number">1800</span> <span class="comment">//单位秒 倒计时过期时间30*60 = 1800秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">OrderId <span class="keyword">string</span>   <span class="comment">//订单id</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Order)</span> <span class="title">CreateOrderSetCacheCountDown</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line"></span><br><span class="line">_, err := cache.Do(<span class="string">"SETEX"</span>, ShopOrderCountDownPrefix + o.OrderId, orderCountDownExpiredTime, <span class="string">"orderCountDown"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis set expire order countDownExpired and err"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DealOutDateOrderId</span><span class="params">()</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line"></span><br><span class="line">pubSubConnClient := redis.PubSubConn&#123;cache&#125;                     <span class="comment">//创建一个订阅客户端</span></span><br><span class="line">err := pubSubConnClient.Subscribe(orderCountDownChannelTopic)   <span class="comment">//订阅频道</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logrus.Println(<span class="string">"redis subscribe order count down topic err:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logrus.Debug(<span class="string">"order countDown wait....."</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> res := pubSubConnClient.Receive().(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> redis.Message:</span><br><span class="line">message := (*<span class="keyword">string</span>)(unsafe.Pointer(&amp;res.Data))</span><br><span class="line">logrus.Debug(<span class="string">"expired message:"</span>, *message)</span><br><span class="line"><span class="keyword">if</span> !strings.HasPrefix(*message, ShopOrderCountDownPrefix) &#123;</span><br><span class="line">logrus.Println(<span class="string">"no expired order id *message:"</span>, *message)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">stringArr := strings.Split(*message, <span class="string">"-"</span>)</span><br><span class="line">outDateOrderId := stringArr[<span class="number">1</span>]</span><br><span class="line"><span class="comment">//其实这里还可以检查一下订单是否真的已经支付成功</span></span><br><span class="line"><span class="comment">//cancel 订单</span></span><br><span class="line">order := model.Order&#123;&#125;</span><br><span class="line">order.Id = outDateOrderId</span><br><span class="line">order.Status = model.OrderStatusCancellation</span><br><span class="line"><span class="keyword">if</span> err := order.SystemAutoCancelOrder(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logrus.Errorf(<span class="string">"error in sysAutoCancelOrder id-err:"</span>, outDateOrderId, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> error:</span><br><span class="line">logrus.Errorf(<span class="string">"error handle..."</span>, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>因为使用命令来配置的只是存在于缓存中,当redis重启之后就会失效 所以建议采用配置文件启动redis服务 这一点要特别注意</li></ul><h3 id="最后开启一个golang的协程就可以了-用来一直不停的处理过期的订单id"><a href="#最后开启一个golang的协程就可以了-用来一直不停的处理过期的订单id" class="headerlink" title="最后开启一个golang的协程就可以了 用来一直不停的处理过期的订单id"></a>最后开启一个golang的协程就可以了 用来一直不停的处理过期的订单id</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;几种思路&quot;&gt;&lt;a href=&quot;#几种思路&quot; class=&quot;headerlink&quot; title=&quot;几种思路&quot;&gt;&lt;/a&gt;几种思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用定时任务不断轮询取消，此种方式实现简单，但是存在一个问题，定时任务设置时间较短时，耗费资源，设置时间过长，则
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>golang 请求限流实现的集中策略思路</title>
    <link href="http://yoursite.com/2019/07/17/golang%20%E8%AF%B7%E6%B1%82%E9%99%90%E6%B5%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/17/golang 请求限流实现/</id>
    <published>2019-07-17T08:29:45.000Z</published>
    <updated>2019-07-17T10:25:24.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种思路"><a href="#几种思路" class="headerlink" title="几种思路"></a>几种思路</h2><ul><li>简单的并发控制</li><li>使用计数器实现请求限流</li><li>使用golang官方包实现httpserver频率限制</li><li>使用Token Bucket(令牌桶算法)实现请求限流</li></ul><h3 id="简单的并发控制"><a href="#简单的并发控制" class="headerlink" title="简单的并发控制"></a>简单的并发控制</h3><blockquote><p>利用channel的缓冲通道设定,我们就可以实现并发的限制.我们只要在执行并发的同时,往一个带有缓冲的channel里面写入点东西(随便写点啥, 内容不重要).让并发的goroutine在执行完成后把这个channel里面的东西给读走.这样整个并发的数量就这样控制在这个channel的缓冲区的大小上</p></blockquote><p>比如我们可以用一个bool类型的带缓冲channel作为并发限制的计数器<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chLimit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>然后在并发执行的地方,每次创建一个新的goroutine,都往chLimit里塞个东西<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, sleeptime := <span class="keyword">range</span> input &#123;</span><br><span class="line">chs[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">chLimit &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> limitFunc(chLimit, chs[i], sleeptime, timeout)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里通过go关键字并发执行的是新构造的函数.他在执行完成后,会把chLimit缓冲区里给消费掉一个<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">limitFunc := <span class="function"><span class="keyword">func</span><span class="params">(chLimit <span class="keyword">chan</span> <span class="keyword">bool</span>, ch <span class="keyword">chan</span> <span class="keyword">string</span>, task_id, sleeptime, timeout <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">Run(task_id, sleeptime, timeout, ch)</span><br><span class="line">&lt;-chLimit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来,当创建的goroutine数量到达chLimit的缓冲区上线后.主goroutine就挂起祖塞,直到这些goroutine执行完毕,消费掉了chLimit缓冲区的数据,程序才会继续创建新的goroutine.我们并发数量限制的目的也就达到了.<br>下面是完整的代码:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(task_id, sleeptime, timeout <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">ch_run := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> run(task_id, sleeptime, ch_run)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> re := &lt;- ch_run:</span><br><span class="line">ch &lt;- re</span><br><span class="line"><span class="keyword">case</span> &lt;- time.After(time.Duration(timeout) * time.Second):</span><br><span class="line">re := fmt.Sprintf(<span class="string">"task id %d, timeout"</span>, task_id)</span><br><span class="line">ch &lt;- re</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(task_id, sleeptime <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Duration(sleeptime) * time.Second)</span><br><span class="line">ch &lt;- fmt.Sprintf(<span class="string">"task id %d, Sleep %d second"</span>, task_id, sleeptime)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">input := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">timeout := <span class="number">2</span></span><br><span class="line">chLimit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">chs := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(input))</span><br><span class="line">limitFunc := <span class="function"><span class="keyword">func</span><span class="params">(chLimit, ch <span class="keyword">chan</span> <span class="keyword">string</span>, task_id, sleeptime, timeout <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">Run(task_id, sleeptime, timeout, ch)</span><br><span class="line">&lt;- chLimit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startTime := time.Now()</span><br><span class="line">fmt.Println(<span class="string">"Multirun start"</span>)</span><br><span class="line"><span class="keyword">for</span> i, sleeptime := <span class="keyword">range</span> input &#123;</span><br><span class="line">chs[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">chLimit &lt; <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> limitFunc(chLimit, chs[i], i, sleeptime, timeout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, ch := <span class="keyword">range</span> chs &#123;</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">endTime := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">"Multissh finsished. Process time %s. Number of task is %d"</span>, endTime.Sub(startTime), <span class="built_in">len</span>(input))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;几种思路&quot;&gt;&lt;a href=&quot;#几种思路&quot; class=&quot;headerlink&quot; title=&quot;几种思路&quot;&gt;&lt;/a&gt;几种思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简单的并发控制&lt;/li&gt;
&lt;li&gt;使用计数器实现请求限流&lt;/li&gt;
&lt;li&gt;使用golang官方包实现https
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang 操作 es相关</title>
    <link href="http://yoursite.com/2019/07/09/golang%20es/"/>
    <id>http://yoursite.com/2019/07/09/golang es/</id>
    <published>2019-07-09T08:55:45.000Z</published>
    <updated>2019-08-16T07:36:24.691Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用过程踩坑"><a href="#使用过程踩坑" class="headerlink" title="使用过程踩坑:"></a>使用过程踩坑:</h4><ul><li>docker安装elastic</li><li>docker启动一个es容器</li><li>使用es 服务</li><li>使用es 创建mapping</li><li>使用es 创建client</li><li>使用es 创建索引</li><li>使用es 删除索引</li><li>使用es 删除数据by id</li><li>使用es 导入数据import</li><li>使用es 设置不分词 全文匹配</li><li>使用es 设置多字段混合搜索</li><li>使用es 设置嵌套搜索</li><li>使用es 设置嵌套搜索和普通多字段混合搜索</li></ul><h4 id="docker安装elastic"><a href="#docker安装elastic" class="headerlink" title="docker安装elastic"></a>docker安装elastic</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull elasticsearch:6.5.0</span><br></pre></td></tr></table></figure><h4 id="docker启动一个es容器"><a href="#docker启动一个es容器" class="headerlink" title="docker启动一个es容器"></a>docker启动一个es容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name es -d -e ES_JAVA_OPTS=<span class="string">"-Xms512m -Xmx512m"</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.5.0</span><br></pre></td></tr></table></figure><p>后面只要使用 docker start es(容器名) 即可 开启该容器了</p><p>然后访问Get localhost:9200 发现未启动成功, 查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f es</span><br><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">[2019-07-11T03:40:22,889][INFO ][o.e.n.Node               ] [yN7SHo9] stopping ...</span><br><span class="line">[2019-07-11T03:40:22,954][INFO ][o.e.n.Node               ] [yN7SHo9] stopped</span><br><span class="line">[2019-07-11T03:40:22,954][INFO ][o.e.n.Node               ] [yN7SHo9] closing ...</span><br><span class="line">[2019-07-11T03:40:22,977][INFO ][o.e.n.Node               ] [yN7SHo9] closed</span><br><span class="line">[2019-07-11T03:40:22,984][INFO ][o.e.x.m.j.p.NativeController] [yN7SHo9] Native controller process has stopped - no new native processes can be started</span><br></pre></td></tr></table></figure></p><p>这里提示：vm.max_map_count [65530] is too low, increase to at least [262144]，说max_map_count的值太小了，需要设大到262144</p><p>查看max_map_count的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/vm/max_map_count</span><br><span class="line">65530</span><br></pre></td></tr></table></figure></p><p>重新设置max_map_count的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w vm.max_map_count=262144</span><br><span class="line">vm.max_map_count = 262144</span><br></pre></td></tr></table></figure></p><p>再次启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start es</span><br></pre></td></tr></table></figure></p><p>在这里的时候一定要慢一会再刷新 locahost:9200 可能是我的电脑配置太低<br>可以查看日志 看到started就代表启动成功了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2019-07-11T09:57:37,454][INFO ][o.e.n.Node               ] [yN7SHo9] started</span><br></pre></td></tr></table></figure></p><p>再次访问 GET localhost:9200<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&#123;</span></span><br><span class="line"><span class="string">name: "yN7SHo9",</span></span><br><span class="line"><span class="string">cluster_name: "docker-cluster",</span></span><br><span class="line"><span class="string">cluster_uuid: "J0Bb6xooR_OlTZMEtgoPHg",</span></span><br><span class="line"><span class="string">version: &#123;</span></span><br><span class="line"><span class="string">number: "6.5.4",</span></span><br><span class="line"><span class="string">build_flavor: "default",</span></span><br><span class="line"><span class="string">build_type: "tar",</span></span><br><span class="line"><span class="string">build_hash: "d2ef93d",</span></span><br><span class="line"><span class="string">build_date: "2018-12-17T21:17:40.758843Z",</span></span><br><span class="line"><span class="string">build_snapshot: false,</span></span><br><span class="line"><span class="string">lucene_version: "7.5.0",</span></span><br><span class="line"><span class="string">minimum_wire_compatibility_version: "5.6.0",</span></span><br><span class="line"><span class="string">minimum_index_compatibility_version: "5.0.0"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">tagline: "You Know, for Search"</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure></p><p>以上表示安装成功</p><h4 id="使用es-服务"><a href="#使用es-服务" class="headerlink" title="使用es 服务"></a>使用es 服务</h4><p>只需要在配置中 使用 localhost:9200即可使用该服务了</p><h4 id="使用es创建mapping"><a href="#使用es创建mapping" class="headerlink" title="使用es创建mapping"></a>使用es创建mapping</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapping = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">"settings":&#123;</span></span><br><span class="line"><span class="string">"number_of_shards": 1,  //分片数 分布式的概念 暂时还不怎么理解</span></span><br><span class="line"><span class="string">"number_of_replicas": 0</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"mappings":&#123;</span></span><br><span class="line"><span class="string">"blog":&#123;</span></span><br><span class="line"><span class="string">"properties": &#123;</span></span><br><span class="line"><span class="string">"id": &#123;</span></span><br><span class="line"><span class="string">"type": "keyword"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"title": &#123;</span></span><br><span class="line"><span class="string">"type": "text"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"summary": &#123;</span></span><br><span class="line"><span class="string">"type": "text"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"tags": &#123;</span></span><br><span class="line"><span class="string">"type": "nested",   //嵌套</span></span><br><span class="line"><span class="string">"properties": &#123;</span></span><br><span class="line"><span class="string">"name": &#123;</span></span><br><span class="line"><span class="string">"type": "keyword"  //keyword 表示不对name分词 必须要完全匹配才行</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ESIndexName = <span class="string">"star"</span>   <span class="comment">//索引index 代表数据库 database的概念</span></span><br><span class="line"><span class="keyword">const</span> ESTypeName = <span class="string">"blog"</span>         <span class="comment">//类型type  代表数据库 table的概念</span></span><br></pre></td></tr></table></figure><h4 id="golang-使用并创建一个client"><a href="#golang-使用并创建一个client" class="headerlink" title="golang 使用并创建一个client"></a>golang 使用并创建一个client</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/olivere/elastic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EsClient *elastic.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitElastic</span><span class="params">()</span></span> &#123;</span><br><span class="line">host := Config.Elastic.Addr</span><br><span class="line">fmt.Println(host)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">EsClient, err = elastic.NewClient(</span><br><span class="line">elastic.SetURL(host),</span><br><span class="line">elastic.SetHealthcheck(<span class="literal">false</span>),</span><br><span class="line">elastic.SetSniff(<span class="literal">false</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"create elastic Client error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"create elastic Client success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查并创建mapping索引"><a href="#检查并创建mapping索引" class="headerlink" title="检查并创建mapping索引"></a>检查并创建mapping索引</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查并创建索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkMapping</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">exists, err := app.EsClient.IndexExists(ESIndexName).Do(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es blog indexExists err"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = app.EsClient.CreateIndex(ESIndexName).BodyString(mapping).Do(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es createIndex err"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"create index ok"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量导入数据"><a href="#批量导入数据" class="headerlink" title="批量导入数据"></a>批量导入数据</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量导入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ImportBlog</span><span class="params">(c *neo.Ctx)</span> <span class="params">(i <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">checkMapping()</span><br><span class="line"></span><br><span class="line">blog := &amp;model.Blog&#123;&#125;</span><br><span class="line">rawQuery := <span class="string">"status:=:published,reviewed:=:1"</span></span><br><span class="line">blogs, _, err := blog.List(rawQuery, <span class="string">""</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bulk := app.EsClient.Bulk().Index(ESIndexName).Type(ESTypeName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> *blogs &#123;</span><br><span class="line">log.Println(<span class="string">"tag es add blog id:"</span>, b.Id)</span><br><span class="line">bulk.Add(elastic.NewBulkIndexRequest().Id(b.Id).Doc(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = bulk.Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Text(<span class="string">"import ok"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入单条数据进入es"><a href="#导入单条数据进入es" class="headerlink" title="导入单条数据进入es"></a>导入单条数据进入es</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入单条数据进入es中</span></span><br><span class="line"><span class="comment">//往es里面导入单条blog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ImportSingleBlog</span><span class="params">(blog model.Blog)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> blog.Status == <span class="string">"published"</span> &amp;&amp; blog.Reviewed == <span class="literal">true</span> &#123;</span><br><span class="line">bulk := app.EsClient.Bulk().Index(ESIndexName).Type(ESTypeName)</span><br><span class="line">bulk.Add(elastic.NewBulkIndexRequest().Id(blog.Id).Doc(blog))</span><br><span class="line">_, err := bulk.Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es add single blog Do error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"es add single blog Do Success bId:"</span>, blog.Id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es add single blog Do failed bId-status-reviewed:"</span>, blog.Id, blog.Status, blog.Reviewed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除es中的某个索引数据内容"><a href="#删除es中的某个索引数据内容" class="headerlink" title="删除es中的某个索引数据内容"></a>删除es中的某个索引数据内容</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Summary  删除blog</span></span><br><span class="line"><span class="comment">// @Tags     es</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; json ""</span></span><br><span class="line"><span class="comment">// @Router /v1/es/blogs/delete [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteBlog</span><span class="params">(c *neo.Ctx)</span> <span class="params">(i <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">_, err := app.EsClient.DeleteIndex(ESIndexName).Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Text(<span class="string">"delete ok"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除某个索引内单条es数据内容"><a href="#删除某个索引内单条es数据内容" class="headerlink" title="删除某个索引内单条es数据内容"></a>删除某个索引内单条es数据内容</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除单条blog从es中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteSingleBlog</span><span class="params">(blogId <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">_, err := app.EsClient.Delete().Index(ESIndexName).Type(ESTypeName).Id(blogId).Refresh(<span class="string">"true"</span>).Do(context.Background())</span><br><span class="line">log.Println(<span class="string">"delete single blog from es blogId-err:"</span>, blogId, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query查询blog-嵌套以及多关键字查询"><a href="#query查询blog-嵌套以及多关键字查询" class="headerlink" title="query查询blog 嵌套以及多关键字查询"></a>query查询blog 嵌套以及多关键字查询</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryBlog</span><span class="params">(c *neo.Ctx)</span> <span class="params">(i <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">currentUserId := c.Req.Header.Get(<span class="string">"user_id"</span>)</span><br><span class="line"></span><br><span class="line">blogResponse := <span class="built_in">make</span>([]BlogResponse, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">keyword := pkg.DefaultQuery(c, <span class="string">"key"</span>, <span class="string">""</span>)</span><br><span class="line">log.Println(<span class="string">"es blog query key:"</span>, keyword)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> keyword == <span class="string">""</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es blog query key is empty"</span>)</span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Json(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"data"</span>: blogResponse,</span><br><span class="line"><span class="string">"total"</span>: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求user-server rpc 存储userSearchLog</span></span><br><span class="line">projectType := <span class="number">1</span>  <span class="comment">//代表BlogServer</span></span><br><span class="line">searchPage := <span class="number">0</span>   <span class="comment">//代表发现页搜索入口</span></span><br><span class="line">_, err := rpc.AddUserSearchLog(currentUserId, keyword, <span class="keyword">int64</span>(projectType), <span class="keyword">int64</span>(searchPage))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es search tag key addUserSearchLog rpc err-userId-key"</span>, err, currentUserId, keyword)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line">titleQ := elastic.NewMatchQuery(<span class="string">"title"</span>, keyword).Boost(<span class="number">2</span>)</span><br><span class="line">summaryQ := elastic.NewMatchQuery(<span class="string">"summary"</span>, keyword).Boost(<span class="number">0.5</span>)</span><br><span class="line">tagNameQ := elastic.NewMatchQuery(<span class="string">"tags.name"</span>, keyword)</span><br><span class="line">nestedQ := elastic.NewNestedQuery(<span class="string">"tags"</span>, tagNameQ)</span><br><span class="line">boolQ := elastic.NewBoolQuery().Should(titleQ, summaryQ).Must(nestedQ)</span><br><span class="line"></span><br><span class="line">res, err := app.EsClient.Search().Index(ESIndexName).Type(ESTypeName).</span><br><span class="line">Query(boolQ).Sort(<span class="string">"createdAt"</span>, <span class="literal">false</span>).Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es query blog search error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError, c.Res.Text(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b model.Blog</span><br><span class="line"><span class="keyword">for</span> _, hit := <span class="keyword">range</span> res.Hits.Hits &#123;</span><br><span class="line">json.Unmarshal(*hit.Source, &amp;b)</span><br><span class="line"><span class="keyword">if</span> b.Status == <span class="string">"onlyAuthorVisible"</span> &amp;&amp; b.UserId != currentUserId &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Println(<span class="string">"es blog search blog-id-status-reviewed:"</span>, b.Id, b.Status, b.Reviewed)</span><br><span class="line">blogResponse = <span class="built_in">append</span>(blogResponse, BlogResponse&#123;</span><br><span class="line">Blog:    b,</span><br><span class="line">User:    *rpc.GetUserInfo(b.UserId),</span><br><span class="line">IsThumb: CheckIsThumb(currentUserId, b.Id),</span><br><span class="line">IsStar:  CheckIsStar(currentUserId, b.Id),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total := <span class="built_in">len</span>(blogResponse)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.StatusOK, c.Res.Json(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"data"</span>: blogResponse,</span><br><span class="line"><span class="string">"total"</span>: total,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用过程踩坑&quot;&gt;&lt;a href=&quot;#使用过程踩坑&quot; class=&quot;headerlink&quot; title=&quot;使用过程踩坑:&quot;&gt;&lt;/a&gt;使用过程踩坑:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;docker安装elastic&lt;/li&gt;
&lt;li&gt;docker启动一个es容器&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="golang es" scheme="http://yoursite.com/tags/golang-es/"/>
    
  </entry>
  
  <entry>
    <title>redis布隆选择器在去重方面的使用</title>
    <link href="http://yoursite.com/2019/06/11/redis%E5%B8%83%E9%9A%86%E9%80%89%E6%8B%A9%E5%99%A8%E5%9C%A8%E5%8E%BB%E9%87%8D%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/11/redis布隆选择器在去重方面的使用/</id>
    <published>2019-06-11T08:25:00.000Z</published>
    <updated>2019-06-11T09:16:38.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis布隆选择器背景介绍"><a href="#redis布隆选择器背景介绍" class="headerlink" title="redis布隆选择器背景介绍:"></a>redis布隆选择器背景介绍:</h4><ul><li><p>1.使用场景：推荐系统给用户推荐新闻，避免重复推送。</p><blockquote><p>需要考虑问题：从用户观看历史中筛选出没有看过的新闻进行推送，就需要数据库中频繁的使用exists进行查询，但是当用户量很大时，数据库很难顶住压力。</p></blockquote><blockquote><p>解决方法：</p><ul><li>1.1.使用缓存？但是日子长了，会浪费很大空间，不是长久之计，不是很好的解决办法。</li></ul></blockquote><ul><li>1.2.这时布隆过滤器就可以很好的解决这个需求了，可以节约90%以上的空间，缺点就是稍微有那么一点不准确，存在一定的误判率，但是对于这个新闻推送的可以忽略。</li></ul></li></ul><ul><li><p>2.什么布隆过滤器</p><ul><li><p>2.1其实布隆过滤器可以看成是一个不是很准确的set结构，只是在使用它的contains方法判断某个对象是否存在时会出现误判。但是它也不是特别的不精准，只要参数设置合理，那么它的精确度可以控制的足够精准，只会有小小的误判。</p></li><li><p>2.2当布隆过滤器说某个值存在时，那可能就不存在，如果说某个值不存在时，那肯定就是不存在了</p><blockquote><p>打个比方，当一个人说认识你时可能不认识你，当一个人说不认识你时那肯定就不认识了。当它说见过你时，可能根本没有见过面，只不过可能你的脸和它所认识人中某个人的脸相似度比较高，所以产生误判。</p></blockquote></li><li><p>2.3对于上面的场景，当用户看过的新闻，肯定会被过滤掉，对于没有看多的新闻，可能会过滤极少的一部分（误判），但是绝大部分都可以准确识别。这样可以完全保证推送给用户的新闻都是无重复的。</p></li></ul></li><li><p>3.需要安装新版的redis版本</p><blockquote><p>这里我们使用docker来安装redislabs/rebloom : docker pull redislabs/rebloom:latest</p></blockquote></li><li><p>4.bloomfilter 命令使用</p><ul><li><p>4.1 bf.add</p><blockquote><p>语法:[bf.add key options]<br>127.0.0.1&gt; bf.add users user3</p></blockquote><pre><code>(integer) 1</code></pre></li><li><p>4.2 bf.exists</p><blockquote><p>语法:[bf.exixts key options]<br>127.0.0.1&gt; bf.exists users user3</p></blockquote><pre><code>(integer) 1</code></pre></li><li><p>4.3 bf.madd</p><blockquote><p>语法:[bf.madd key …options]<br>127.0.0.1&gt; bf.madd users user4 user5 user6 user7</p></blockquote><pre><code>(integer) 1(integer) 1(integer) 1(integer) 1</code></pre></li><li><p>4.4 bf.mexists</p><blockquote><p>语法:[bf.mexists key …options]<br>127.0.0.1&gt; bf.mexists users user4 user5 user6 user7 user8</p></blockquote><pre><code>(integer) 1(integer) 1(integer) 1(integer) 1(integer) 0</code></pre></li><li><p>4.5 bf.reserve 创建Filter</p><blockquote><p>语法:[bf.reserve key error_rate initial_size]<br>127.0.0.1&gt; bf.reserve books 0.001 10000</p></blockquote><pre><code>ok</code></pre></li></ul></li><li><p>5.在golang中的代码的具体实现和运用</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gomodule/redigo/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">AddUserLog</span><span class="params">(userId, blogId <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line">_, err := cache.Do(<span class="string">"BF.ADD"</span>, <span class="string">"user-read-log-"</span>+blogId, userId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"bloom filer add err"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">CheckIsRead</span><span class="params">(userId <span class="keyword">string</span>, blogIds []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line"></span><br><span class="line">ints := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, blogId := <span class="keyword">range</span> blogIds &#123;</span><br><span class="line">args := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"user-read-log-"</span> + blogId&#125;</span><br><span class="line">args = <span class="built_in">append</span>(args, userId)</span><br><span class="line">intExists, err := redis.Int(cache.Do(<span class="string">"bf.exists"</span>, args...))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"debug charles intExists error arg"</span>, args)</span><br><span class="line">intExists = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">ints = <span class="built_in">append</span>(ints, intExists)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ints, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(blog *Blog)</span> <span class="title">DeleteBlogLogCache</span><span class="params">(blogId <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cache := app.GetCache()</span><br><span class="line"><span class="keyword">defer</span> cache.Close()</span><br><span class="line">_, err := cache.Do(<span class="string">"EXPIRE"</span>, <span class="string">"user-read-log-"</span>+blogId, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis set expire bloom filter and err"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol start="6"><li>还有一点特别要注意的事项就是, bf只有add和exists两种类似的操作 没有删除操作 如果要是想删除改数据 则使用expire 使该key过期 例如上面演示代码里面提到的DeleteBlogCache函数的用法</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;redis布隆选择器背景介绍&quot;&gt;&lt;a href=&quot;#redis布隆选择器背景介绍&quot; class=&quot;headerlink&quot; title=&quot;redis布隆选择器背景介绍:&quot;&gt;&lt;/a&gt;redis布隆选择器背景介绍:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.使用场景：推荐系统
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>gorm err不为空和记录未找到的错误区别</title>
    <link href="http://yoursite.com/2019/06/11/gorm%20err%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%92%8C%E8%AE%B0%E5%BD%95%E6%9C%AA%E6%89%BE%E5%88%B0/"/>
    <id>http://yoursite.com/2019/06/11/gorm err不为空和记录未找到/</id>
    <published>2019-06-11T08:00:00.000Z</published>
    <updated>2019-06-11T08:15:34.347Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil"><a href="#gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil" class="headerlink" title="gorm 中err != nil 并不是真的服务器有错误 因为它会把记录未找到也当成是err 并且此时err != nil:"></a>gorm 中err != nil 并不是真的服务器有错误 因为它会把记录未找到也当成是err 并且此时err != nil:</h4><h3 id="对于查找的记录是单个结构体的话-所以我们在处理gorm给我返回的错误的时候-要特别处理一下-例如下面这种处理方式"><a href="#对于查找的记录是单个结构体的话-所以我们在处理gorm给我返回的错误的时候-要特别处理一下-例如下面这种处理方式" class="headerlink" title="对于查找的记录是单个结构体的话 所以我们在处理gorm给我返回的错误的时候 要特别处理一下 例如下面这种处理方式:"></a>对于查找的记录是单个结构体的话 所以我们在处理gorm给我返回的错误的时候 要特别处理一下 例如下面这种处理方式:</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err == gorm.ErrRecordNotFound &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对于查找的记录是结构体数组的时候-判断记录是否为空的时候-则要采取另外一种判断-因为没有记录-并不会报错"><a href="#对于查找的记录是结构体数组的时候-判断记录是否为空的时候-则要采取另外一种判断-因为没有记录-并不会报错" class="headerlink" title="对于查找的记录是结构体数组的时候 判断记录是否为空的时候 则要采取另外一种判断 因为没有记录 并不会报错:"></a>对于查找的记录是结构体数组的时候 判断记录是否为空的时候 则要采取另外一种判断 因为没有记录 并不会报错:</h3><blockquote><p>此时我们就只需要判断给我们返回的结构体数组的长度是否是0 来判断是否有查找到记录的 特别要注意这两种情况的判断</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil&quot;&gt;&lt;a href=&quot;#gorm-中err-nil-并不是真的服务器有错误-因为它会把记录未找到也当成是err-并且此时err-nil&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="goalng gorm" scheme="http://yoursite.com/tags/goalng-gorm/"/>
    
  </entry>
  
  <entry>
    <title>本地新建仓库并关联远程仓库并且首次提交master分支</title>
    <link href="http://yoursite.com/2019/06/11/%E6%9C%AC%E5%9C%B0%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E9%A6%96%E6%AC%A1%E6%8F%90%E4%BA%A4master/"/>
    <id>http://yoursite.com/2019/06/11/本地新建仓库关联远程仓库并首次提交master/</id>
    <published>2019-06-11T07:45:45.000Z</published>
    <updated>2019-06-11T07:52:54.654Z</updated>
    
    <content type="html"><![CDATA[<h4 id="会出现的问题-首次空的提交远程master分支报错"><a href="#会出现的问题-首次空的提交远程master分支报错" class="headerlink" title="会出现的问题 首次空的提交远程master分支报错:"></a>会出现的问题 首次空的提交远程master分支报错:</h4><blockquote><p>处理方法: git commit -m “empty commit” –allow-empty</p></blockquote><h4 id="一般流程的情况是"><a href="#一般流程的情况是" class="headerlink" title="一般流程的情况是:"></a>一般流程的情况是:</h4><blockquote><p>先配置信息</p><pre><code>* git config --global user.name &quot;xxxxx&quot;* git config --global user.email &quot;xxxx@xx.com&quot;</code></pre></blockquote><blockquote><p>创建仓库并提交代码</p><pre><code>* git init* git remote add origin git@github.***.com:xxxx/***.git* git add -A* git commit -am&quot;首次建立项目提交&quot;* git push origin -u origin master</code></pre></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;会出现的问题-首次空的提交远程master分支报错&quot;&gt;&lt;a href=&quot;#会出现的问题-首次空的提交远程master分支报错&quot; class=&quot;headerlink&quot; title=&quot;会出现的问题 首次空的提交远程master分支报错:&quot;&gt;&lt;/a&gt;会出现的问题 首次空
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>golang 逃逸分析</title>
    <link href="http://yoursite.com/2019/05/07/golang%20%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/07/golang 逃逸分析/</id>
    <published>2019-05-07T03:19:45.000Z</published>
    <updated>2019-05-07T03:36:26.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="golang-逃逸分析"><a href="#golang-逃逸分析" class="headerlink" title="golang 逃逸分析"></a>golang 逃逸分析</h3><h4 id="什么叫做golang的逃逸分析"><a href="#什么叫做golang的逃逸分析" class="headerlink" title="什么叫做golang的逃逸分析"></a>什么叫做golang的逃逸分析</h4><blockquote><p>逃逸分析是确定指针动态范围的方法,可以分析在程序的哪些地方可以访问指针.<br>当一个变量(或对象)在子程序中被分配,一个指向变量的指针可能逃逸到其他执行线程中,或者去调用子程序.如果使用尾递归优化,对象也可能逃逸到被调用的子程序中.如果一个程序分配一个对象并返回一个该对象的指针,该对象可能在程序中的任何一个地方被访问到,这样指针就成功逃逸了.</p></blockquote><blockquote><p>如果指针存储在全局变量或者其他数据结构中,也可能发生逃逸,这种情况是当前程序中的指针逃逸.逃逸分析需要确定指针所有可以存储的地方,保证指针的生命周期只在当前进程或线程中.</p></blockquote><h4 id="逃逸分析的好处"><a href="#逃逸分析的好处" class="headerlink" title="逃逸分析的好处"></a>逃逸分析的好处</h4><ul><li><ol><li>减少gc压力,不逃逸的对象分配在栈上,当函数返回时就回收了资源,不需要gc标记清楚</li></ol></li><li><ol start="2"><li>逃逸分析完以后可以确定哪些变量可以分配在栈上,栈的分配比堆快,性能更好</li></ol></li><li><ol start="3"><li>同步消除</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;golang-逃逸分析&quot;&gt;&lt;a href=&quot;#golang-逃逸分析&quot; class=&quot;headerlink&quot; title=&quot;golang 逃逸分析&quot;&gt;&lt;/a&gt;golang 逃逸分析&lt;/h3&gt;&lt;h4 id=&quot;什么叫做golang的逃逸分析&quot;&gt;&lt;a href=&quot;#什么
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang 中关于数组的相关特性</title>
    <link href="http://yoursite.com/2019/05/06/golang%20array/"/>
    <id>http://yoursite.com/2019/05/06/golang array/</id>
    <published>2019-05-06T07:42:45.000Z</published>
    <updated>2019-05-06T07:42:59.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="golang-中关于数组的相关特性"><a href="#golang-中关于数组的相关特性" class="headerlink" title="golang 中关于数组的相关特性"></a>golang 中关于数组的相关特性</h4><ul><li><p>值类型 </p><blockquote><p>作为参数传递时 不能修改其值 只是一种拷贝 而且还需要特别注意的就是 不同长度的数组类型不一样 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果打印出来的应该仍然还是1，2，3</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果想要改变的话 需要使用指针传递作为参数 但是常见的是使用 slice 切片 自动可以修改原来的数据</p></li><li><p>数组类型跟长度有关系 可以定义[…]int 让编译器自己去判断数组长度</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;golang-中关于数组的相关特性&quot;&gt;&lt;a href=&quot;#golang-中关于数组的相关特性&quot; class=&quot;headerlink&quot; title=&quot;golang 中关于数组的相关特性&quot;&gt;&lt;/a&gt;golang 中关于数组的相关特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;值
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang nsq实时消息处理系统源码解读一一基本介绍</title>
    <link href="http://yoursite.com/2019/05/06/golang%20nsq/"/>
    <id>http://yoursite.com/2019/05/06/golang nsq/</id>
    <published>2019-05-06T07:42:45.000Z</published>
    <updated>2019-05-07T03:38:40.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于golang中nsq实时消息处理系统的背景介绍"><a href="#关于golang中nsq实时消息处理系统的背景介绍" class="headerlink" title="关于golang中nsq实时消息处理系统的背景介绍"></a>关于golang中nsq实时消息处理系统的背景介绍</h4><blockquote><p>NSQ是由知名短链接服务商bitly用Go语言开发的实时消息处理系统，具有高性能、高可靠、无视单点故障等优点，是一个非常不错的新兴的消息队列解决方案; </p></blockquote><blockquote><p>nsg易于配置和部署，所有参考都通过命令行指定，编译好的二进制文件，没有其它依赖项。而且支持多种消息格式。</p></blockquote><blockquote><p><a href="https://github.com/bitly/nsq" target="_blank" rel="noopener">源码下载地址</a></p></blockquote><blockquote><p>本系列文档下载的源码为0.2.27版本</p></blockquote><blockquote><p>为了更好的理解源码,最理想的起步当然是先了解nsq的用法, 所以接下来会先讲解nsq的安装和使用</p></blockquote><h4 id="nsq的安装"><a href="#nsq的安装" class="headerlink" title="nsq的安装"></a>nsq的安装</h4><ul><li><p>1.安装golang的环境</p></li><li><p>2.安装godep,在命令行执行: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/kr/godep</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果使用go get安装过程中报错,可以参考另一篇文章:关于go get安装git golang项目时报错的处理办法<br>安装之后,在$GOPATH/bin目录下面就可以看到有godep 的可执行文件,记得讲$GOPATH/bin目录环境配置到系统环境变量$PATH里面,以后在命令行就可以直接输入godep命令来执行一些操作了.</p></blockquote><ul><li><p>3.安装assert,在命令行执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/bmizerany/assert</span><br></pre></td></tr></table></figure></li><li><p>4.接下来开始获取nsq的代码并编译, 在命令行执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ godep get github.com/bitly/nsq/...</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意: 后面有三个点不能少, 执行完之后在$GOPATH/bin目录下面就会看到有很多nsq打头的可执行二进制文件存在,至此安装就结束了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于golang中nsq实时消息处理系统的背景介绍&quot;&gt;&lt;a href=&quot;#关于golang中nsq实时消息处理系统的背景介绍&quot; class=&quot;headerlink&quot; title=&quot;关于golang中nsq实时消息处理系统的背景介绍&quot;&gt;&lt;/a&gt;关于golang中ns
      
    
    </summary>
    
    
      <category term="goalng nsq" scheme="http://yoursite.com/tags/goalng-nsq/"/>
    
  </entry>
  
  <entry>
    <title>etcd在mac系统中的安装与使用</title>
    <link href="http://yoursite.com/2019/05/06/golang%20mac%20etcd%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/06/golang mac etcd安装与使用/</id>
    <published>2019-05-06T07:41:45.000Z</published>
    <updated>2019-05-06T07:50:25.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd在mac系统中的安装与使用"><a href="#etcd在mac系统中的安装与使用" class="headerlink" title="etcd在mac系统中的安装与使用"></a>etcd在mac系统中的安装与使用</h3><ul><li>进入<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">etcd官网</a>提供的连接， 点击GitHub Project, 然后选择release版本下载编译好的版本代码包</li><li>解压下载好的代码包</li><li>cd 进入解压后的代码包</li><li>启动server端 nohup ./etcd –listen-client-urls ‘<a href="http://0.0.0.0:2379&#39;" target="_blank" rel="noopener">http://0.0.0.0:2379&#39;</a> –advertise-client-urls ‘<a href="http://0.0.0.0:2379&#39;" target="_blank" rel="noopener">http://0.0.0.0:2379&#39;</a> &amp;</li><li>client客户端连接使用 </li><li>ETCDCTL_API=3 ./etcdctl put “name” “fengjun”</li><li>ETCDCTL_API=3 ./etcdctl get “name”</li></ul><h4 id="etcd特性总结"><a href="#etcd特性总结" class="headerlink" title="etcd特性总结"></a>etcd特性总结</h4><ul><li>对于key前缀相同的有序排列存储在系统中</li></ul><blockquote><p>例如:</p><ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job1” “{…job1}”<ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job2” “{…job2}”</li></ul></li></ul></blockquote><ul><li><p>然后可以按照key前缀设置来查找集合</p><blockquote><p>ETCDCTL_API=3 ./etcdctl get “/cron/jobs/“ –prefix</p><ul><li>/cron/jobs/job1</li><li>{…job1}</li><li>/cron/jobs/job2</li><li>{…job2}</li></ul></blockquote></li><li><p>在新开的终端会话界面使用watch命令检测 进入解压后的文件夹中</p><blockquote><p>ETCDCTL_API=3 ./etcdctl watch “/cron/jobs/“ –prefix</p><ul><li>ETCDCTL_API=3 ./etcdctl put “/cron/jobs/job2” “{…1111}” //修改</li><li>新开的终端会显示:<br>PUT<br>/cron/jobs/job2<br>{…1111}</li></ul></blockquote></li><li><p>获取etcd golang客户端的代码 在上面打开的etcd<a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">github项目代码</a>里面 <a href="https://github.com/etcd-io/etcd/tree/master/clientv3" target="_blank" rel="noopener">clientv3</a></p><blockquote><p>etcd/clientv3 is the official Go etcd client for v3.<br>  golang安装客户端代码方式<br>  Install<br>  go get github.com/coreos/etcd/client  //或者使用gopm工具 或者进入golang中国下载该包 然后入项目中</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;etcd在mac系统中的安装与使用&quot;&gt;&lt;a href=&quot;#etcd在mac系统中的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;etcd在mac系统中的安装与使用&quot;&gt;&lt;/a&gt;etcd在mac系统中的安装与使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;a
      
    
    </summary>
    
    
      <category term="goalng etcd mac" scheme="http://yoursite.com/tags/goalng-etcd-mac/"/>
    
  </entry>
  
  <entry>
    <title>golang 字符串处理</title>
    <link href="http://yoursite.com/2019/05/06/golang%20string/"/>
    <id>http://yoursite.com/2019/05/06/golang string/</id>
    <published>2019-05-06T07:41:45.000Z</published>
    <updated>2019-05-06T07:48:44.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置"><a href="#字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置" class="headerlink" title="字符和字符串处理相关常见操作 特别是对于中文字符的处理以及全球不同字符的处置"></a>字符和字符串处理相关常见操作 特别是对于中文字符的处理以及全球不同字符的处置</h3><h4 id="golang中string实现的背景介绍"><a href="#golang中string实现的背景介绍" class="headerlink" title="golang中string实现的背景介绍"></a>golang中string实现的背景介绍</h4><blockquote><p>golang中string底层是通过byte数组实现的。中文字符在unicode下占2个字节，在utf-8编码下占3个字节，而golang默认编码正好是utf-8。</p></blockquote><blockquote><p>关于golang中的rune:<br>// rune is an alias for int32 and is equivalent to int32 in all ways. It is<br>// used, by convention, to distinguish character values from integer values.</p></blockquote><p>//int32的别名，几乎在所有方面等同于int32<br>//它用来区分字符值和整数值</p><p>type rune = int32</p><ul><li>获取字节数长度 len 特别记住这一点 len(s)返回的是底层的字节数 英文占一个字节 中文字符在golang中占有两个字节 并不是获得字符串长度</li><li>关于utf-8和rune的互相转换</li><li>关于含有中文字符串的对于每一个中文字符的遍历处理 强制转换该字符串变成一个[]rune数组</li><li>计算字节数</li><li>使用range遍历pos, rune pos会不连续</li><li>使用[]byte转换获得字节</li><li>使用utf8.RuneCountInStriung获得字符数量</li></ul><h4 id="golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于："><a href="#golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：" class="headerlink" title="golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于："></a>golang中海油一个byte数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：</h4><blockquote><ul><li>byte 等同于int8，常用来处理ascii字符</li><li>rune 等同于int32,常用来处理unicode或utf-8字符</li></ul></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Yes我爱慕课网!"</span>  <span class="comment">//UTF-8编码方式 中文 可变长编码方式 英文是一字节方式 中文是3字节方式存储</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">//查看字符的具体存储 X打出字节的具体数字 16进制 每个字符的ascii码值</span></span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> []<span class="keyword">byte</span>(s) &#123; <span class="comment">//utf-8编码</span></span><br><span class="line">fmt.Println(<span class="string">"%X\n"</span>, b)   </span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123;  <span class="comment">//unicode编码 i是每个字符的开始字节数 ch is a rune(int32) 一个四字节的整数</span></span><br><span class="line">fmt.Printf(<span class="string">"(%d %X)"</span>, i , ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Rune count:"</span>,</span><br><span class="line">utf8.RuneCountInString(s))   <span class="comment">//获取rune个数 也是获取字符串长度的方法之一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="keyword">rune</span>(s) &#123;  <span class="comment">//获得一个rune数组 一个下标一个英文字符或者一个中文字符 获取字符串长度方法二</span></span><br><span class="line">fmt.Println(<span class="string">"(%d %c"</span>), i, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">bytes := []bytes(s)   <span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">ch, size := utf8.DecodeRune(bytes)</span><br><span class="line">fmt.Printf(<span class="string">"(%c %v)"</span>, ch, size)</span><br><span class="line">bytes = bytes[size:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">Yes我爱慕课网!</span><br><span class="line"><span class="number">59</span><span class="number">65</span><span class="number">73</span>E6<span class="number">88</span><span class="number">91</span>E7<span class="number">88</span>B1E6<span class="number">85</span><span class="number">95</span>E8AFBEE7BD<span class="number">91</span><span class="number">21</span><span class="comment">//utf-8编码</span></span><br><span class="line">(<span class="number">0</span> <span class="number">59</span>)(<span class="number">1</span> <span class="number">65</span>)(<span class="number">2</span> <span class="number">73</span>)(<span class="number">3</span> <span class="number">6211</span>)(<span class="number">6</span> <span class="number">7231</span>)(<span class="number">9</span> <span class="number">6155</span>)(<span class="number">12</span> <span class="number">8</span>BFE)(<span class="number">15</span> <span class="number">7</span>F51)(<span class="number">18</span> <span class="number">21</span>)   <span class="comment">//unicode编码</span></span><br><span class="line">(<span class="number">0</span> Y)(<span class="number">1</span> e)(<span class="number">2</span> s)(<span class="number">3</span> 我)(<span class="number">4</span> 爱)(<span class="number">5</span> 慕)(<span class="number">6</span> 课)(<span class="number">7</span> 网)(<span class="number">8</span> !)    <span class="comment">//第几个字符是谁</span></span><br><span class="line">(Y <span class="number">1</span>)(e <span class="number">1</span>)(s <span class="number">1</span>)(我 <span class="number">3</span>)(爱 <span class="number">3</span>)(慕 <span class="number">3</span>)(课 <span class="number">3</span>)(网 <span class="number">3</span>)(! <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"hello 你好"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//golang中string底层是通过byte数组实现的，座椅直接求len 实际是在按字节长度计算  所以一个汉字占3个字节算了3个长度</span></span><br><span class="line">    fmt.Println(<span class="string">"len(str):"</span>, <span class="built_in">len</span>(str))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下两种都可以得到str的字符串长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//golang中的unicode/utf8包提供了用utf-8获取长度的方法</span></span><br><span class="line">    fmt.Println(<span class="string">"RuneCountInString:"</span>, utf8.RuneCountInString(str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过rune类型处理unicode字符</span></span><br><span class="line">    fmt.Println(<span class="string">"rune:"</span>, <span class="built_in">len</span>([]<span class="keyword">rune</span>(str)))</span><br><span class="line">&#125;</span><br><span class="line">运行结果:</span><br><span class="line"><span class="built_in">len</span>(str): <span class="number">12</span></span><br><span class="line">RuneCountInString: <span class="number">8</span></span><br><span class="line"><span class="keyword">rune</span>: <span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置&quot;&gt;&lt;a href=&quot;#字符和字符串处理相关常见操作-特别是对于中文字符的处理以及全球不同字符的处置&quot; class=&quot;headerlink&quot; title=&quot;字符和字符串处理相关常见操作 特
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang字符串时间戳转换成time.Time类型</title>
    <link href="http://yoursite.com/2019/05/06/golang%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E6%88%90time.Time%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/06/golang字符串时间戳转换成time.Time类型/</id>
    <published>2019-05-06T07:09:45.000Z</published>
    <updated>2019-05-06T07:21:05.302Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间转换的原理是"><a href="#时间转换的原理是" class="headerlink" title="时间转换的原理是:"></a>时间转换的原理是:</h4><blockquote><p>将原先的字符串时间戳转换为int64位, 再使用time.Unix(v, 0)转换成time类型的时间戳</p></blockquote><h4 id="需要相关使用的函数有"><a href="#需要相关使用的函数有" class="headerlink" title="需要相关使用的函数有:"></a>需要相关使用的函数有:</h4><ul><li>unix64, _ := strconv.ParseInt(unixStr, 10, 64)</li><li>time.Unix(v, 0)</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime time.Time</span><br><span class="line">startTimeInt64, _ := strconv.ParseInt(start, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">startTime = time.Unix(startTimeInt64, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;时间转换的原理是&quot;&gt;&lt;a href=&quot;#时间转换的原理是&quot; class=&quot;headerlink&quot; title=&quot;时间转换的原理是:&quot;&gt;&lt;/a&gt;时间转换的原理是:&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;将原先的字符串时间戳转换为int64位, 再使用time.Un
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
  <entry>
    <title>golang字符串处理</title>
    <link href="http://yoursite.com/2019/05/06/golang%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/06/golang字符串处理/</id>
    <published>2019-05-06T06:12:01.000Z</published>
    <updated>2019-05-06T07:21:49.157Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于golang中字符串处理相关注意事项"><a href="#关于golang中字符串处理相关注意事项" class="headerlink" title="关于golang中字符串处理相关注意事项"></a>关于golang中字符串处理相关注意事项</h4><blockquote><p>len(str) 获得是该字符串的字节数<br>中文字符占3个字节 英文字母占一个字节<br>如果想要获得数组 一个下标一个中文字符或者英文字符的话,需要使用[]rune()来强制转换</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于golang中字符串处理相关注意事项&quot;&gt;&lt;a href=&quot;#关于golang中字符串处理相关注意事项&quot; class=&quot;headerlink&quot; title=&quot;关于golang中字符串处理相关注意事项&quot;&gt;&lt;/a&gt;关于golang中字符串处理相关注意事项&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="goalng" scheme="http://yoursite.com/tags/goalng/"/>
    
  </entry>
  
</feed>
